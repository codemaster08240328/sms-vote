if (!String.prototype.compareTo) {
    String.prototype.compareTo = function (s, ignoreCase) {
        return String.compareTo(this, s, ignoreCase);
    };
}
if (!String.compareTo) {
    String.compareTo = function (s1, s2, ignoreCase) {
        if (ignoreCase) {
            if (s1) {
                s1 = s1.toUpperCase();
            }
            if (s2) {
                s2 = s2.toUpperCase();
            }
        }
        s1 = s1 || '';
        s2 = s2 || '';
        if (s1 == s2) {
            return 0;
        }
        if (s1 < s2) {
            return -1;
        }
        return 1;
    };
}
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (str) {
        return this.indexOf(str) == 0;
    };
}
if (!String.isNullOrEmpty) {
    String.isNullOrEmpty = function (s) {
        return !s || !s.length;
    };
}
if (!String.concat) {
    String.concat = function () {
        if (arguments.length === 2) {
            return arguments[0] + arguments[1];
        }
        return Array.prototype.join.call(arguments, '');
    };
}
// MA: Deprecating this in favour of template strings. leaving it here in case we need it back.
if (!String.format) {
    String.format = function (format, ...values) {
        return __format(format, arguments, false);
    };
}
function __format(format, values, useLocale) {
    const _formatRE = /(\{[^\}^\{]+\})/g;
    return format.replace(_formatRE, function (str, m) {
        const index = parseInt(m.substr(1));
        const value = values[index + 1];
        if ((value === null) || (value === undefined)) {
            return '';
        }
        if (value.format) {
            let formatSpec = null;
            const formatIndex = m.indexOf(':');
            if (formatIndex > 0) {
                formatSpec = m.substring(formatIndex + 1, m.length - 1);
            }
            return value.format(formatSpec);
        }
        else {
            return value.toString();
        }
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi9TdHJpbmdFeHRlbnNpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlBLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRTtJQUM3QixNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQVMsRUFBRSxVQUFtQjtRQUVqRSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUM7Q0FDTDtBQUVELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO0lBQ25CLE1BQU0sQ0FBQyxTQUFTLEdBQUcsVUFBVSxFQUFVLEVBQUUsRUFBVSxFQUFFLFVBQW1CO1FBRXBFLElBQUksVUFBVSxFQUFFO1lBQ1osSUFBSSxFQUFFLEVBQUU7Z0JBQ0osRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUN6QjtZQUNELElBQUksRUFBRSxFQUFFO2dCQUNKLEVBQUUsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDekI7U0FDSjtRQUNELEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ2QsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFFZCxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDVixPQUFPLENBQUMsQ0FBQztTQUNaO1FBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ1QsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNiO1FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDLENBQUM7Q0FDTDtBQUVELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUM5QixNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLEdBQVc7UUFDL0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUM7Q0FDTDtBQUVELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFO0lBQ3ZCLE1BQU0sQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFTO1FBQ3RDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzNCLENBQUMsQ0FBQztDQUNMO0FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDaEIsTUFBTSxDQUFDLE1BQU0sR0FBRztRQUVaLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQztDQUNMO0FBRUQsK0ZBQStGO0FBQy9GLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO0lBQ2hCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsVUFBVSxNQUFNLEVBQUUsR0FBRyxNQUFNO1FBQ3ZDLE9BQU8sUUFBUSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDO0NBQ0w7QUFFRCxrQkFBa0IsTUFBYyxFQUFFLE1BQWtCLEVBQUUsU0FBa0I7SUFDcEUsTUFBTyxTQUFTLEdBQVcsa0JBQWtCLENBQUM7SUFFOUMsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFDM0IsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNaLE1BQU8sS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsTUFBTyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxFQUFFO1lBQzNDLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDZCxJQUFLLFVBQVUsR0FBVyxJQUFJLENBQUM7WUFDL0IsTUFBTyxXQUFXLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQyxJQUFJLFdBQVcsR0FBRyxDQUFDLEVBQUU7Z0JBQ2pCLFVBQVUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMzRDtZQUNELE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNuQzthQUNJO1lBQ0QsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDM0I7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUMiLCJmaWxlIjoiY29tbW9uL1N0cmluZ0V4dGVuc2lvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgU3RyaW5nIHtcbiAgICBzdGFydHNXaXRoKHN0cjogc3RyaW5nKTogYm9vbGVhbjtcbiAgICBjb21wYXJlVG8oczogc3RyaW5nLCBpZ25vcmVDYXNlOiBib29sZWFuKTogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgU3RyaW5nQ29uc3RydWN0b3Ige1xuICAgIGlzTnVsbE9yRW1wdHkoczogc3RyaW5nKTogYm9vbGVhbjtcbiAgICBjb25jYXQoLi4uc3RyaW5nczogc3RyaW5nW10pOiBzdHJpbmc7XG4gICAgZm9ybWF0KGZvcm1hdDogc3RyaW5nLCAuLi52YWx1ZXM6IGFueVtdKTogc3RyaW5nO1xuICAgIGNvbXBhcmVUbyhzdHIxOiBzdHJpbmcsIHN0cjI6IHN0cmluZywgaWdub3JlQ2FzZTogYm9vbGVhbik6IG51bWJlcjtcbn1cblxuaWYgKCFTdHJpbmcucHJvdG90eXBlLmNvbXBhcmVUbykge1xuICAgIFN0cmluZy5wcm90b3R5cGUuY29tcGFyZVRvID0gZnVuY3Rpb24gKHM6IHN0cmluZywgaWdub3JlQ2FzZTogYm9vbGVhbilcbiAgICB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuY29tcGFyZVRvKHRoaXMsIHMsIGlnbm9yZUNhc2UpO1xuICAgIH07XG59XG5cbmlmICghU3RyaW5nLmNvbXBhcmVUbykge1xuICAgIFN0cmluZy5jb21wYXJlVG8gPSBmdW5jdGlvbiAoczE6IHN0cmluZywgczI6IHN0cmluZywgaWdub3JlQ2FzZTogYm9vbGVhbilcbiAgICB7XG4gICAgICAgIGlmIChpZ25vcmVDYXNlKSB7XG4gICAgICAgICAgICBpZiAoczEpIHtcbiAgICAgICAgICAgICAgICBzMSA9IHMxLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIpIHtcbiAgICAgICAgICAgICAgICBzMiA9IHMyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgczEgPSBzMSB8fCAnJztcbiAgICAgICAgczIgPSBzMiB8fCAnJztcblxuICAgICAgICBpZiAoczEgPT0gczIpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMSA8IHMyKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfTtcbn1cblxuaWYgKCFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgpIHtcbiAgICBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGggPSBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihzdHIpID09IDA7XG4gICAgfTtcbn1cblxuaWYgKCFTdHJpbmcuaXNOdWxsT3JFbXB0eSkge1xuICAgIFN0cmluZy5pc051bGxPckVtcHR5ID0gZnVuY3Rpb24gKHM6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXMgfHwgIXMubGVuZ3RoO1xuICAgIH07XG59XG5cbmlmICghU3RyaW5nLmNvbmNhdCkge1xuICAgIFN0cmluZy5jb25jYXQgPSBmdW5jdGlvbiAoKTogc3RyaW5nXG4gICAge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXSArIGFyZ3VtZW50c1sxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmpvaW4uY2FsbChhcmd1bWVudHMsICcnKTtcbiAgICB9O1xufVxuXG4vLyBNQTogRGVwcmVjYXRpbmcgdGhpcyBpbiBmYXZvdXIgb2YgdGVtcGxhdGUgc3RyaW5ncy4gbGVhdmluZyBpdCBoZXJlIGluIGNhc2Ugd2UgbmVlZCBpdCBiYWNrLlxuaWYgKCFTdHJpbmcuZm9ybWF0KSB7XG4gICAgU3RyaW5nLmZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQsIC4uLnZhbHVlcykge1xuICAgICAgICByZXR1cm4gX19mb3JtYXQoZm9ybWF0LCBhcmd1bWVudHMsIGZhbHNlKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBfX2Zvcm1hdChmb3JtYXQ6IHN0cmluZywgdmFsdWVzOiBJQXJndW1lbnRzLCB1c2VMb2NhbGU6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIGNvbnN0ICBfZm9ybWF0UkU6IFJlZ0V4cCA9IC8oXFx7W15cXH1eXFx7XStcXH0pL2c7XG5cbiAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoX2Zvcm1hdFJFLFxuICAgICAgICBmdW5jdGlvbiAoc3RyLCBtKSB7XG4gICAgICAgICAgICBjb25zdCAgaW5kZXggPSBwYXJzZUludChtLnN1YnN0cigxKSk7XG4gICAgICAgICAgICBjb25zdCAgdmFsdWUgPSB2YWx1ZXNbaW5kZXggKyAxXTtcbiAgICAgICAgICAgIGlmICgodmFsdWUgPT09IG51bGwpIHx8ICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZS5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgICBsZXQgIGZvcm1hdFNwZWM6IHN0cmluZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29uc3QgIGZvcm1hdEluZGV4ID0gbS5pbmRleE9mKCc6Jyk7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdEluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXRTcGVjID0gbS5zdWJzdHJpbmcoZm9ybWF0SW5kZXggKyAxLCBtLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuZm9ybWF0KGZvcm1hdFNwZWMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufSJdfQ==
