"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Module dependencies.
 */
const express = require("express");
const compression = require("compression"); // compresses requests
const session = require("express-session");
const bodyParser = require("body-parser");
const logger = require("morgan");
const errorHandler = require("errorhandler");
const lusca = require("lusca");
const dotenv = require("dotenv");
const mongo = require("connect-mongo");
const flash = require("express-flash");
const path = require("path");
const mongoose = require("mongoose");
const passport = require("passport");
const socketio = require("socket.io");
const http = require("http");
const expressValidator = require("express-validator");
require('./common/ArrayExtensions');
require('./common/StringExtensions');
const MongoStore = mongo(session);
/**
 * Load environment variables from .env file, where API keys and passwords are configured.
 */
dotenv.config({ path: path.join(__dirname, '.env') });
/**
 * Controllers (route handlers).
 */
const homeController = require("./controllers/home");
const userController = require("./controllers/user");
const contactController = require("./controllers/contact");
const registrationController = require("./controllers/register");
const eventController = require("./controllers/event");
const resultsController = require("./controllers/results");
/**
 * API keys and Passport configuration.
 */
const passportConfig = require("./config/passport");
/**
 * Create Express server.
 */
const app = express();
const httpServer = http.createServer(app);
const io = socketio(httpServer);
io.on('connection', (socket) => {
    console.log('a user connected');
});
/**
 * Connect to MongoDB.
 */
// mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGODB_URI || process.env.MONGOLAB_URI);
mongoose.connection.on('error', () => {
    console.log('MongoDB connection error. Please make sure MongoDB is running.');
    process.exit();
});
/**
 * Express configuration.
 */
app.set('port', process.env.PORT || 3000);
app.set('views', path.join(__dirname, './views'));
app.set('view engine', 'pug');
app.use(compression());
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(expressValidator());
app.use(session({
    resave: true,
    saveUninitialized: true,
    secret: process.env.SESSION_SECRET,
    store: new MongoStore({
        url: process.env.MONGODB_URI || process.env.MONGOLAB_URI,
        autoReconnect: true
    })
}));
app.use(passport.initialize());
app.use(passport.session());
app.use(flash());
app.use(lusca.xframe('SAMEORIGIN'));
app.use(lusca.xssProtection(true));
app.use((req, res, next) => {
    res.locals.user = req.user;
    next();
});
app.use((req, res, next) => {
    // After successful login, redirect back to the intended page
    if (!req.user &&
        req.path !== '/login' &&
        req.path !== '/signup' &&
        !req.path.match(/^\/auth/) &&
        !req.path.match(/\./)) {
        req.session.returnTo = req.path;
    }
    else if (req.user &&
        req.path == '/account') {
        req.session.returnTo = req.path;
    }
    next();
});
app.use(express.static(path.join(__dirname, 'public'), { maxAge: 31557600000 }));
io.on('connection', (socket) => {
    console.log('a user connected');
});
/**
 * Boilerplate app routes.
 */
app.get('/login', userController.getLogin);
app.post('/login', userController.postLogin);
app.get('/logout', userController.logout);
app.get('/forgot', userController.getForgot);
app.post('/forgot', userController.postForgot);
app.get('/reset/:token', userController.getReset);
app.post('/reset/:token', userController.postReset);
app.get('/signup', userController.getSignup);
app.post('/signup', userController.postSignup);
app.get('/contact', contactController.getContact);
app.post('/contact', contactController.postContact);
app.get('/account', passportConfig.isAuthenticated, userController.getAccount);
app.get('/account/unlink/:provider', passportConfig.isAuthenticated, userController.getOauthUnlink);
app.post('/account/profile', passportConfig.isAuthenticated, userController.postUpdateProfile);
app.post('/account/password', passportConfig.isAuthenticated, userController.postUpdatePassword);
app.post('/account/delete', passportConfig.isAuthenticated, userController.postDeleteAccount);
/**
 * Primary app routes.
 */
app.get('/', homeController.index);
app.get('/event/:eventId/results', resultsController.index);
app.get('/event/:eventId/register', passportConfig.isAuthenticated, registrationController.index);
app.get('/event/:eventId/announce', passportConfig.isAuthenticated, eventController.getAnnounce);
app.post('/event/:eventId/announce', passportConfig.isAuthenticated, eventController.announce);
/**
 * Api routes.
 */
app.get('/api/events', passportConfig.isAuthenticated, eventController.getEvents);
app.get('/api/event/:eventId', eventController.getEvent);
app.post('/api/event/', passportConfig.isAuthenticated, eventController.saveEvent);
app.delete('/api/event/:eventId', passportConfig.isAuthenticated, eventController.deleteEvent);
app.post('/api/event/:eventId/incrementround', passportConfig.isAuthenticated, eventController.incrementRound);
app.post('/api/vote/sms', eventController.voteSMS);
app.get('/api/event/:eventId/registrations', passportConfig.isAuthenticated, registrationController.getRegistrations);
app.put('/api/event/:eventId/register', passportConfig.isAuthenticated, registrationController.registerVoter);
/**
 * Error Handler. Provides full stack - remove for production
 */
app.use(errorHandler());
/**
 * Start Express server.
 */
app.listen(app.get('port'), () => {
    console.log(('  App is running at http://localhost:%d in %s mode'), app.get('port'), app.get('env'));
    console.log('  Press CTRL-C to stop\n');
});
module.exports = app;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsRUFBRSxHQUFHLEVBQUU7SUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLG9EQUFvRCxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDckcsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQzVDLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgKiBhcyBjb21wcmVzc2lvbiBmcm9tICdjb21wcmVzc2lvbic7ICAvLyBjb21wcmVzc2VzIHJlcXVlc3RzXHJcbmltcG9ydCAqIGFzIHNlc3Npb24gZnJvbSAnZXhwcmVzcy1zZXNzaW9uJztcclxuaW1wb3J0ICogYXMgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XHJcbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdtb3JnYW4nO1xyXG5pbXBvcnQgKiBhcyBlcnJvckhhbmRsZXIgZnJvbSAnZXJyb3JoYW5kbGVyJztcclxuaW1wb3J0ICogYXMgbHVzY2EgZnJvbSAnbHVzY2EnO1xyXG5pbXBvcnQgKiBhcyBkb3RlbnYgZnJvbSAnZG90ZW52JztcclxuaW1wb3J0ICogYXMgbW9uZ28gZnJvbSAnY29ubmVjdC1tb25nbyc7XHJcbmltcG9ydCAqIGFzIGZsYXNoIGZyb20gJ2V4cHJlc3MtZmxhc2gnO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgKiBhcyBtb25nb29zZSBmcm9tICdtb25nb29zZSc7XHJcbmltcG9ydCAqIGFzIHBhc3Nwb3J0IGZyb20gJ3Bhc3Nwb3J0JztcclxuaW1wb3J0ICogYXMgc29ja2V0aW8gZnJvbSAnc29ja2V0LmlvJztcclxuaW1wb3J0ICogYXMgaHR0cCBmcm9tICdodHRwJztcclxuaW1wb3J0ICogYXMgdHdpbGlvIGZyb20gJ3R3aWxpbyc7XHJcbmltcG9ydCB0d2lsaW9Db25maWcgZnJvbSAnLi9jb25maWcvdHdpbGlvJztcclxuXHJcbmltcG9ydCBleHByZXNzVmFsaWRhdG9yID0gcmVxdWlyZSgnZXhwcmVzcy12YWxpZGF0b3InKTtcclxucmVxdWlyZSgnLi9jb21tb24vQXJyYXlFeHRlbnNpb25zJyk7XHJcbnJlcXVpcmUoJy4vY29tbW9uL1N0cmluZ0V4dGVuc2lvbnMnKTtcclxuXHJcblxyXG5jb25zdCBNb25nb1N0b3JlID0gbW9uZ28oc2Vzc2lvbik7XHJcblxyXG4vKipcclxuICogTG9hZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZnJvbSAuZW52IGZpbGUsIHdoZXJlIEFQSSBrZXlzIGFuZCBwYXNzd29yZHMgYXJlIGNvbmZpZ3VyZWQuXHJcbiAqL1xyXG5kb3RlbnYuY29uZmlnKHsgcGF0aDogcGF0aC5qb2luKF9fZGlybmFtZSwgJy5lbnYnKSB9KTtcclxuXHJcblxyXG4vKipcclxuICogQ29udHJvbGxlcnMgKHJvdXRlIGhhbmRsZXJzKS5cclxuICovXHJcbmltcG9ydCAqIGFzIGhvbWVDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvaG9tZSc7XHJcbmltcG9ydCAqIGFzIHVzZXJDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvdXNlcic7XHJcbmltcG9ydCAqIGFzIGNvbnRhY3RDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvY29udGFjdCc7XHJcbmltcG9ydCAqIGFzIHJlZ2lzdHJhdGlvbkNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVycy9yZWdpc3Rlcic7XHJcbmltcG9ydCAqIGFzIGV2ZW50Q29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXJzL2V2ZW50JztcclxuaW1wb3J0ICogYXMgcmVzdWx0c0NvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVycy9yZXN1bHRzJztcclxuXHJcbi8qKlxyXG4gKiBBUEkga2V5cyBhbmQgUGFzc3BvcnQgY29uZmlndXJhdGlvbi5cclxuICovXHJcbmltcG9ydCAqIGFzIHBhc3Nwb3J0Q29uZmlnIGZyb20gJy4vY29uZmlnL3Bhc3Nwb3J0JztcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgRXhwcmVzcyBzZXJ2ZXIuXHJcbiAqL1xyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG5jb25zdCBodHRwU2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcclxuY29uc3QgaW8gPSBzb2NrZXRpbyhodHRwU2VydmVyKTtcclxuXHJcbmlvLm9uKCdjb25uZWN0aW9uJywgKHNvY2tldDogU29ja2V0SU8uU29ja2V0KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnYSB1c2VyIGNvbm5lY3RlZCcpO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBDb25uZWN0IHRvIE1vbmdvREIuXHJcbiAqL1xyXG4vLyBtb25nb29zZS5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XHJcbm1vbmdvb3NlLmNvbm5lY3QocHJvY2Vzcy5lbnYuTU9OR09EQl9VUkkgfHwgcHJvY2Vzcy5lbnYuTU9OR09MQUJfVVJJKTtcclxuXHJcbm1vbmdvb3NlLmNvbm5lY3Rpb24ub24oJ2Vycm9yJywgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ01vbmdvREIgY29ubmVjdGlvbiBlcnJvci4gUGxlYXNlIG1ha2Ugc3VyZSBNb25nb0RCIGlzIHJ1bm5pbmcuJyk7XHJcbiAgICBwcm9jZXNzLmV4aXQoKTtcclxufSk7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBFeHByZXNzIGNvbmZpZ3VyYXRpb24uXHJcbiAqL1xyXG5hcHAuc2V0KCdwb3J0JywgcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwKTtcclxuYXBwLnNldCgndmlld3MnLCBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi92aWV3cycpKTtcclxuYXBwLnNldCgndmlldyBlbmdpbmUnLCAncHVnJyk7XHJcbmFwcC51c2UoY29tcHJlc3Npb24oKSk7XHJcbmFwcC51c2UobG9nZ2VyKCdkZXYnKSk7XHJcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xyXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcclxuYXBwLnVzZShleHByZXNzVmFsaWRhdG9yKCkpO1xyXG5hcHAudXNlKHNlc3Npb24oe1xyXG4gICAgcmVzYXZlOiB0cnVlLFxyXG4gICAgc2F2ZVVuaW5pdGlhbGl6ZWQ6IHRydWUsXHJcbiAgICBzZWNyZXQ6IHByb2Nlc3MuZW52LlNFU1NJT05fU0VDUkVULFxyXG4gICAgc3RvcmU6IG5ldyBNb25nb1N0b3JlKHtcclxuICAgICAgICB1cmw6IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJIHx8IHByb2Nlc3MuZW52Lk1PTkdPTEFCX1VSSSxcclxuICAgICAgICBhdXRvUmVjb25uZWN0OiB0cnVlXHJcbiAgICB9KVxyXG59KSk7XHJcbmFwcC51c2UocGFzc3BvcnQuaW5pdGlhbGl6ZSgpKTtcclxuYXBwLnVzZShwYXNzcG9ydC5zZXNzaW9uKCkpO1xyXG5hcHAudXNlKGZsYXNoKCkpO1xyXG5hcHAudXNlKGx1c2NhLnhmcmFtZSgnU0FNRU9SSUdJTicpKTtcclxuYXBwLnVzZShsdXNjYS54c3NQcm90ZWN0aW9uKHRydWUpKTtcclxuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcclxuICAgIHJlcy5sb2NhbHMudXNlciA9IHJlcS51c2VyO1xyXG4gICAgbmV4dCgpO1xyXG59KTtcclxuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcclxuICAgIC8vIEFmdGVyIHN1Y2Nlc3NmdWwgbG9naW4sIHJlZGlyZWN0IGJhY2sgdG8gdGhlIGludGVuZGVkIHBhZ2VcclxuICAgIGlmICghcmVxLnVzZXIgJiZcclxuICAgICAgICByZXEucGF0aCAhPT0gJy9sb2dpbicgJiZcclxuICAgICAgICByZXEucGF0aCAhPT0gJy9zaWdudXAnICYmXHJcbiAgICAgICAgIXJlcS5wYXRoLm1hdGNoKC9eXFwvYXV0aC8pICYmXHJcbiAgICAgICAgIXJlcS5wYXRoLm1hdGNoKC9cXC4vKSkge1xyXG4gICAgICAgIHJlcS5zZXNzaW9uLnJldHVyblRvID0gcmVxLnBhdGg7XHJcbiAgICB9IGVsc2UgaWYgKHJlcS51c2VyICYmXHJcbiAgICAgICAgcmVxLnBhdGggPT0gJy9hY2NvdW50Jykge1xyXG4gICAgICAgIHJlcS5zZXNzaW9uLnJldHVyblRvID0gcmVxLnBhdGg7XHJcbiAgICB9XHJcbiAgICBuZXh0KCk7XHJcbn0pO1xyXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICdwdWJsaWMnKSwgeyBtYXhBZ2U6IDMxNTU3NjAwMDAwIH0pKTtcclxuXHJcbmlvLm9uKCdjb25uZWN0aW9uJywgKHNvY2tldCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ2EgdXNlciBjb25uZWN0ZWQnKTtcclxufSk7XHJcblxyXG4vKipcclxuICogQm9pbGVycGxhdGUgYXBwIHJvdXRlcy5cclxuICovXHJcbmFwcC5nZXQoJy9sb2dpbicsIHVzZXJDb250cm9sbGVyLmdldExvZ2luKTtcclxuYXBwLnBvc3QoJy9sb2dpbicsIHVzZXJDb250cm9sbGVyLnBvc3RMb2dpbik7XHJcbmFwcC5nZXQoJy9sb2dvdXQnLCB1c2VyQ29udHJvbGxlci5sb2dvdXQpO1xyXG5hcHAuZ2V0KCcvZm9yZ290JywgdXNlckNvbnRyb2xsZXIuZ2V0Rm9yZ290KTtcclxuYXBwLnBvc3QoJy9mb3Jnb3QnLCB1c2VyQ29udHJvbGxlci5wb3N0Rm9yZ290KTtcclxuYXBwLmdldCgnL3Jlc2V0Lzp0b2tlbicsIHVzZXJDb250cm9sbGVyLmdldFJlc2V0KTtcclxuYXBwLnBvc3QoJy9yZXNldC86dG9rZW4nLCB1c2VyQ29udHJvbGxlci5wb3N0UmVzZXQpO1xyXG5hcHAuZ2V0KCcvc2lnbnVwJywgdXNlckNvbnRyb2xsZXIuZ2V0U2lnbnVwKTtcclxuYXBwLnBvc3QoJy9zaWdudXAnLCB1c2VyQ29udHJvbGxlci5wb3N0U2lnbnVwKTtcclxuYXBwLmdldCgnL2NvbnRhY3QnLCBjb250YWN0Q29udHJvbGxlci5nZXRDb250YWN0KTtcclxuYXBwLnBvc3QoJy9jb250YWN0JywgY29udGFjdENvbnRyb2xsZXIucG9zdENvbnRhY3QpO1xyXG5hcHAuZ2V0KCcvYWNjb3VudCcsIHBhc3Nwb3J0Q29uZmlnLmlzQXV0aGVudGljYXRlZCwgdXNlckNvbnRyb2xsZXIuZ2V0QWNjb3VudCk7XHJcbmFwcC5nZXQoJy9hY2NvdW50L3VubGluay86cHJvdmlkZXInLCBwYXNzcG9ydENvbmZpZy5pc0F1dGhlbnRpY2F0ZWQsIHVzZXJDb250cm9sbGVyLmdldE9hdXRoVW5saW5rKTtcclxuYXBwLnBvc3QoJy9hY2NvdW50L3Byb2ZpbGUnLCBwYXNzcG9ydENvbmZpZy5pc0F1dGhlbnRpY2F0ZWQsIHVzZXJDb250cm9sbGVyLnBvc3RVcGRhdGVQcm9maWxlKTtcclxuYXBwLnBvc3QoJy9hY2NvdW50L3Bhc3N3b3JkJywgcGFzc3BvcnRDb25maWcuaXNBdXRoZW50aWNhdGVkLCB1c2VyQ29udHJvbGxlci5wb3N0VXBkYXRlUGFzc3dvcmQpO1xyXG5hcHAucG9zdCgnL2FjY291bnQvZGVsZXRlJywgcGFzc3BvcnRDb25maWcuaXNBdXRoZW50aWNhdGVkLCB1c2VyQ29udHJvbGxlci5wb3N0RGVsZXRlQWNjb3VudCk7XHJcblxyXG4vKipcclxuICogUHJpbWFyeSBhcHAgcm91dGVzLlxyXG4gKi9cclxuYXBwLmdldCgnLycsIGhvbWVDb250cm9sbGVyLmluZGV4KTtcclxuYXBwLmdldCgnL2V2ZW50LzpldmVudElkL3Jlc3VsdHMnLCByZXN1bHRzQ29udHJvbGxlci5pbmRleCk7XHJcbmFwcC5nZXQoJy9ldmVudC86ZXZlbnRJZC9yZWdpc3RlcicsIHBhc3Nwb3J0Q29uZmlnLmlzQXV0aGVudGljYXRlZCwgcmVnaXN0cmF0aW9uQ29udHJvbGxlci5pbmRleCk7XHJcbmFwcC5nZXQoJy9ldmVudC86ZXZlbnRJZC9hbm5vdW5jZScsIHBhc3Nwb3J0Q29uZmlnLmlzQXV0aGVudGljYXRlZCwgZXZlbnRDb250cm9sbGVyLmdldEFubm91bmNlKTtcclxuYXBwLnBvc3QoJy9ldmVudC86ZXZlbnRJZC9hbm5vdW5jZScsIHBhc3Nwb3J0Q29uZmlnLmlzQXV0aGVudGljYXRlZCwgZXZlbnRDb250cm9sbGVyLmFubm91bmNlKTtcclxuXHJcbi8qKlxyXG4gKiBBcGkgcm91dGVzLlxyXG4gKi9cclxuYXBwLmdldCgnL2FwaS9ldmVudHMnLCBwYXNzcG9ydENvbmZpZy5pc0F1dGhlbnRpY2F0ZWQsIGV2ZW50Q29udHJvbGxlci5nZXRFdmVudHMpO1xyXG5hcHAuZ2V0KCcvYXBpL2V2ZW50LzpldmVudElkJywgZXZlbnRDb250cm9sbGVyLmdldEV2ZW50KTtcclxuYXBwLnBvc3QoJy9hcGkvZXZlbnQvJywgcGFzc3BvcnRDb25maWcuaXNBdXRoZW50aWNhdGVkLCBldmVudENvbnRyb2xsZXIuc2F2ZUV2ZW50KTtcclxuYXBwLmRlbGV0ZSgnL2FwaS9ldmVudC86ZXZlbnRJZCcsIHBhc3Nwb3J0Q29uZmlnLmlzQXV0aGVudGljYXRlZCwgZXZlbnRDb250cm9sbGVyLmRlbGV0ZUV2ZW50KTtcclxuYXBwLnBvc3QoJy9hcGkvZXZlbnQvOmV2ZW50SWQvaW5jcmVtZW50cm91bmQnLCBwYXNzcG9ydENvbmZpZy5pc0F1dGhlbnRpY2F0ZWQsIGV2ZW50Q29udHJvbGxlci5pbmNyZW1lbnRSb3VuZCk7XHJcbmFwcC5wb3N0KCcvYXBpL3ZvdGUvc21zJywgZXZlbnRDb250cm9sbGVyLnZvdGVTTVMpO1xyXG5hcHAuZ2V0KCcvYXBpL2V2ZW50LzpldmVudElkL3JlZ2lzdHJhdGlvbnMnLCBwYXNzcG9ydENvbmZpZy5pc0F1dGhlbnRpY2F0ZWQsIHJlZ2lzdHJhdGlvbkNvbnRyb2xsZXIuZ2V0UmVnaXN0cmF0aW9ucyk7XHJcbmFwcC5wdXQoJy9hcGkvZXZlbnQvOmV2ZW50SWQvcmVnaXN0ZXInLCBwYXNzcG9ydENvbmZpZy5pc0F1dGhlbnRpY2F0ZWQsIHJlZ2lzdHJhdGlvbkNvbnRyb2xsZXIucmVnaXN0ZXJWb3Rlcik7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBFcnJvciBIYW5kbGVyLiBQcm92aWRlcyBmdWxsIHN0YWNrIC0gcmVtb3ZlIGZvciBwcm9kdWN0aW9uXHJcbiAqL1xyXG5hcHAudXNlKGVycm9ySGFuZGxlcigpKTtcclxuXHJcbi8qKlxyXG4gKiBTdGFydCBFeHByZXNzIHNlcnZlci5cclxuICovXHJcbmFwcC5saXN0ZW4oYXBwLmdldCgncG9ydCcpLCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygoJyAgQXBwIGlzIHJ1bm5pbmcgYXQgaHR0cDovL2xvY2FsaG9zdDolZCBpbiAlcyBtb2RlJyksIGFwcC5nZXQoJ3BvcnQnKSwgYXBwLmdldCgnZW52JykpO1xyXG4gICAgY29uc29sZS5sb2coJyAgUHJlc3MgQ1RSTC1DIHRvIHN0b3BcXG4nKTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGFwcDsiXX0=
