"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Event_1 = require("../models/Event");
const utils = require("../utils");
exports.voteSMS = (request, response, next) => __awaiter(this, void 0, void 0, function* () {
    response.header('Content-Type', 'text/xml');
    console.log(`voteSMS() called at ${new Date().toISOString()}`);
    const body = request.param('Body').trim();
    // the number the vote it being sent to (this should match an Event)
    const to = request.param('To').slice(1);
    // the voter, use this to keep people from voting more than once
    const from = request.param('From');
    console.log(`Vote received - Body: ${body} From: ${from} To: ${to}`);
    let events;
    try {
        events = yield Event_1.default
            .find({ PhoneNumber: to })
            .limit(1)
            .exec();
    }
    catch (err) {
        console.log(err);
        response.send('<Response>Sorry! Our system encountered an error. Please try again.</Response>');
        return next(err);
    }
    const event = events[0];
    if (events.length < 1) {
        console.log(`No event is configured at this number: ${to}`);
        // silently fail for the user
        response.send('<Response><Sms>Sorry! No event is currently running at this number. Please check the number and try again.</Sms></Response>');
    }
    else if (!event.Enabled) {
        response.send('<Response><Sms>Voting is now closed.</Sms></Response>');
    }
    else if (!utils.testint(body)) {
        console.log('Bad vote: ' + event.Name + ', ' + from + ', ' + body);
        response.send('<Response><Sms>Sorry, invalid vote. Please text a number between 1 and ' + event.Contestants.length + '</Sms></Response>');
    }
    else if (!event.CurrentRound) {
        console.log(`No round is currently selected for event: ${event.Name}`);
        response.send('<Response><Sms>Voting is now closed.</Sms></Response>');
    }
    else if (utils.testint(body) && (parseInt(body) <= 0 || !event.CurrentRound.Contestants.map(c => c.ContestantNumber).contains(parseInt(body)))) {
        console.log('Bad vote: ' + event.Name + ', ' + from + ', ' + body + ', ' + ('[1-' + event.Contestants.length + ']'));
        response.send('<Response><Sms>Sorry, invalid vote. Please text a number between 1 and ' + event.Contestants.length + '</Sms></Response>');
    }
    else if (event.hasVoted(from)) {
        console.log('Denying vote: ' + event.Name + ', ' + from + ' - Already voted');
        response.send('<Response><Sms>Sorry, you are only allowed to vote once per round.</Sms></Response>');
    }
    else {
        const choice = parseInt(body);
        const registration = event.Registrations.find(r => r.PhoneNumber == from);
        event.CurrentRound.Contestants
            .find(c => c.ContestantNumber === choice)
            .Votes.push(registration);
        event.save((err) => {
            if (err) {
                response.send('<Response><Sms>We encountered an error saving your vote. Try again?</Sms></Response>');
            }
            else {
                console.log('Accepting vote: ' + event.Name + ', ' + from);
                response.send('<Response><Sms>Thanks for your vote for ' + event.Name + '. Powered by Twilio.</Sms></Response>');
            }
        });
    }
});
exports.saveEvent = (req, res, next) => __awaiter(this, void 0, void 0, function* () {
    const dto = req.body;
    let savedEvent;
    if (!dto._id) {
        const eventDTO = dto;
        eventDTO.Rounds = eventDTO.Rounds.map(r => {
            r.IsFinished = false;
            return r;
        });
        const event = new Event_1.default(eventDTO);
        try {
            savedEvent = yield event.save();
        }
        catch (err) {
            return next(err);
        }
        const result = {
            Success: true,
            Data: savedEvent
        };
        res.json(result);
    }
    else {
        try {
            savedEvent = yield Event_1.default.findByIdAndUpdate(dto._id, dto, { upsert: true });
            const result = {
                Success: true,
                Data: savedEvent
            };
            res.json(result);
        }
        catch (err) {
            return next(err);
        }
    }
});
exports.deleteEvent = (req, res, next) => {
    Event_1.default.findByIdAndRemove(req.params.eventId, (err, product) => {
        if (err) {
            return next(err);
        }
        const result = {
            Success: true
        };
        res.json(result);
    });
};
exports.getEvents = (req, res, next) => {
    Event_1.default.find((err, events) => {
        if (err) {
            return next(err);
        }
        events = events.map(v => {
            v.Contestants = v.Contestants.sort((c1, c2) => c1.ContestantNumber - c2.ContestantNumber);
            return v;
        });
        res.json(events);
    });
};
exports.getEvent = (req, res, next) => __awaiter(this, void 0, void 0, function* () {
    let event;
    try {
        event = yield Event_1.default.findById(req.params.eventId);
    }
    catch (err) {
        return next(err);
    }
    event.Contestants = event.Contestants.sort((c1, c2) => c1.ContestantNumber - c2.ContestantNumber);
    res.json(event);
});
exports.incrementRound = (req, res, next) => __awaiter(this, void 0, void 0, function* () {
    let event;
    try {
        event = yield Event_1.default.findById(req.params.eventId);
        if (event.CurrentRound) { // if a round is running, complete it
            console.log(`Closing round ${event.CurrentRound.RoundNumber}`);
            const currentRound = event.Rounds
                .find(r => r.RoundNumber == event.CurrentRound.RoundNumber);
            currentRound.IsFinished = true;
            currentRound.Contestants = event.CurrentRound.Contestants;
            event.CurrentRound = null;
            const result = yield event.save();
            const operationResult = {
                Success: true,
                Data: result
            };
            res.json(operationResult);
        }
        else {
            const availableRounds = event.Rounds.filter(r => !r.IsFinished);
            if (availableRounds.length > 0) { // if there are any rounds left, start the next one
                const nextRound = availableRounds.reduce((prev, cur) => {
                    return prev.RoundNumber < cur.RoundNumber ? prev : cur;
                });
                console.log(`Starting round ${nextRound.RoundNumber}`);
                event.CurrentRound = nextRound;
                const result = yield event.save();
                const operationResult = {
                    Success: true,
                    Data: result
                };
                res.json(operationResult);
            }
            else { // can't increment because all rounds are finished. return failure.
                console.log('Attempted to increment round on finished event.');
                const operationResult = {
                    Success: false
                };
                res.json(operationResult);
            }
        }
    }
    catch (err) {
        return next(err);
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2V2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFDQSwyQ0FBdUU7QUFJdkUsa0NBQWtDO0FBSXJCLFFBQUEsT0FBTyxHQUFHLENBQU8sT0FBZ0IsRUFBRSxRQUFrQixFQUFFLElBQWtCLEVBQUUsRUFBRTtJQUN0RixRQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUU1QyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUUvRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFDLG9FQUFvRTtJQUNwRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV4QyxnRUFBZ0U7SUFDaEUsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixJQUFJLFVBQVUsSUFBSSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFckUsSUFBSSxNQUF1QixDQUFDO0lBQzVCLElBQUk7UUFDQSxNQUFNLEdBQUcsTUFBTSxlQUFVO2FBQ3BCLElBQUksQ0FBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsQ0FBRTthQUMzQixLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ1IsSUFBSSxFQUFFLENBQUM7S0FDZjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixRQUFRLENBQUMsSUFBSSxDQUFDLGdGQUFnRixDQUFDLENBQUM7UUFDaEcsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEI7SUFFRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFeEIsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVELDZCQUE2QjtRQUM3QixRQUFRLENBQUMsSUFBSSxDQUFDLDZIQUE2SCxDQUFDLENBQUM7S0FDaEo7U0FDSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtRQUNyQixRQUFRLENBQUMsSUFBSSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7S0FDMUU7U0FDSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ25FLFFBQVEsQ0FBQyxJQUFJLENBQUMseUVBQXlFLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsbUJBQW1CLENBQUMsQ0FBQztLQUM3STtTQUNJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLFFBQVEsQ0FBQyxJQUFJLENBQUMsdURBQXVELENBQUMsQ0FBQztLQUMxRTtTQUNJLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUM1SSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNySCxRQUFRLENBQUMsSUFBSSxDQUFDLHlFQUF5RSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDLENBQUM7S0FDN0k7U0FDSSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsa0JBQWtCLENBQUMsQ0FBQztRQUM5RSxRQUFRLENBQUMsSUFBSSxDQUFDLHFGQUFxRixDQUFDLENBQUM7S0FDeEc7U0FDSTtRQUNELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUM7UUFFMUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxXQUFXO2FBQ3pCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsS0FBSyxNQUFNLENBQUM7YUFDeEMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU5QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDZixJQUFJLEdBQUcsRUFBRTtnQkFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLHNGQUFzRixDQUFDLENBQUM7YUFDekc7aUJBQ0k7Z0JBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztnQkFDM0QsUUFBUSxDQUFDLElBQUksQ0FBQywwQ0FBMEMsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLHVDQUF1QyxDQUFDLENBQUM7YUFDcEg7UUFDTCxDQUFDLENBQUMsQ0FBQztLQUNOO0FBQ0wsQ0FBQyxDQUFBLENBQUM7QUFFVyxRQUFBLFNBQVMsR0FBRyxDQUFPLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO0lBQy9FLE1BQU0sR0FBRyxHQUFtQixHQUFHLENBQUMsSUFBSSxDQUFDO0lBQ3JDLElBQUksVUFBeUIsQ0FBQztJQUM5QixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sUUFBUSxHQUFhLEdBQWUsQ0FBQztRQUMzQyxRQUFRLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2xDLENBQUMsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxDQUNKLENBQUM7UUFDRixNQUFNLEtBQUssR0FBRyxJQUFJLGVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2QyxJQUFJO1lBQ0EsVUFBVSxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ25DO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNwQjtRQUVELE1BQU0sTUFBTSxHQUFrQztZQUMxQyxPQUFPLEVBQUUsSUFBSTtZQUNiLElBQUksRUFBRSxVQUFVO1NBQ25CLENBQUM7UUFDRixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3BCO1NBQU07UUFDSCxJQUFJO1lBQ0EsVUFBVSxHQUFHLE1BQU0sZUFBVSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDaEYsTUFBTSxNQUFNLEdBQWtDO2dCQUMxQyxPQUFPLEVBQUUsSUFBSTtnQkFDYixJQUFJLEVBQUUsVUFBVTthQUNuQixDQUFDO1lBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwQjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEI7S0FDSjtBQUNMLENBQUMsQ0FBQSxDQUFDO0FBRVcsUUFBQSxXQUFXLEdBQUcsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCLEVBQUUsRUFBRTtJQUMzRSxlQUFVLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsT0FBc0IsRUFBRSxFQUFFO1FBQzdFLElBQUksR0FBRyxFQUFFO1lBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEI7UUFFRCxNQUFNLE1BQU0sR0FBb0I7WUFDNUIsT0FBTyxFQUFFLElBQUk7U0FDaEIsQ0FBQztRQUVGLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFFVyxRQUFBLFNBQVMsR0FBRyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO0lBQ3pFLGVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBdUIsRUFBRSxFQUFFO1FBQzdDLElBQUksR0FBRyxFQUFFO1lBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEI7UUFDRCxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNwQixDQUFDLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzFGLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7UUFDSCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBRVcsUUFBQSxRQUFRLEdBQUcsQ0FBTyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCLEVBQUUsRUFBRTtJQUM5RSxJQUFJLEtBQW9CLENBQUM7SUFDekIsSUFBSTtRQUNBLEtBQUssR0FBRyxNQUFNLGVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN6RDtJQUNELE9BQU8sR0FBRyxFQUFFO1FBQ1IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEI7SUFDRCxLQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFBLENBQUM7QUFFVyxRQUFBLGNBQWMsR0FBRyxDQUFPLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO0lBQ3BGLElBQUksS0FBb0IsQ0FBQztJQUN6QixJQUFJO1FBQ0EsS0FBSyxHQUFHLE1BQU0sZUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXRELElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFFLHFDQUFxQztZQUUzRCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixLQUFLLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFFL0QsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU07aUJBQzVCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNoRSxZQUFZLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztZQUMvQixZQUFZLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO1lBQzFELEtBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQzFCLE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2xDLE1BQU0sZUFBZSxHQUFrQztnQkFDbkQsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsSUFBSSxFQUFFLE1BQU07YUFDZixDQUFDO1lBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUM3QjthQUNJO1lBQ0QsTUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNoRSxJQUFJLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUUsbURBQW1EO2dCQUNqRixNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO29CQUNuRCxPQUFPLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBQzNELENBQUMsQ0FBQyxDQUFDO2dCQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO2dCQUV2RCxLQUFLLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztnQkFDL0IsTUFBTSxNQUFNLEdBQUcsTUFBTSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xDLE1BQU0sZUFBZSxHQUFrQztvQkFDbkQsT0FBTyxFQUFFLElBQUk7b0JBQ2IsSUFBSSxFQUFFLE1BQU07aUJBQ2YsQ0FBQztnQkFDRixHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2FBQzdCO2lCQUNJLEVBQUUsbUVBQW1FO2dCQUN0RSxPQUFPLENBQUMsR0FBRyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7Z0JBQy9ELE1BQU0sZUFBZSxHQUFvQjtvQkFDckMsT0FBTyxFQUFFLEtBQUs7aUJBQ2pCLENBQUM7Z0JBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUM3QjtTQUNKO0tBQ0o7SUFDRCxPQUFPLEdBQUcsRUFBRTtRQUNSLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3BCO0FBQ0wsQ0FBQyxDQUFBLENBQUMiLCJmaWxlIjoiY29udHJvbGxlcnMvZXZlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCB7IGRlZmF1bHQgYXMgRXZlbnRNb2RlbCwgRXZlbnREb2N1bWVudCB9IGZyb20gJy4uL21vZGVscy9FdmVudCc7XHJcbmltcG9ydCB7IFJvdW5kQ29uZmlnRFRPIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL1JvdW5kRFRPJztcclxuaW1wb3J0IHsgUm91bmRDb250ZXN0YW50RFRPLCBFdmVudENvbnRlc3RhbnREVE8gfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvQ29udGVzdGFudERUTyc7XHJcbmltcG9ydCB7IEV2ZW50Q29uZmlnRFRPLCBFdmVudERUTyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9FdmVudERUTyc7XHJcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgRGF0YU9wZXJhdGlvblJlc3VsdCwgT3BlcmF0aW9uUmVzdWx0LCBDcmVhdGVPcGVyYXRpb25SZXN1bHQgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvT3BlcmF0aW9uUmVzdWx0JztcclxuaW1wb3J0IHsgbmV4dFRpY2sgfSBmcm9tICdxL2luZGV4JztcclxuXHJcbmV4cG9ydCBjb25zdCB2b3RlU01TID0gYXN5bmMgKHJlcXVlc3Q6IFJlcXVlc3QsIHJlc3BvbnNlOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbiAgICByZXNwb25zZS5oZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L3htbCcpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGB2b3RlU01TKCkgY2FsbGVkIGF0ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfWApO1xyXG5cclxuICAgIGNvbnN0IGJvZHkgPSByZXF1ZXN0LnBhcmFtKCdCb2R5JykudHJpbSgpO1xyXG4gICAgLy8gdGhlIG51bWJlciB0aGUgdm90ZSBpdCBiZWluZyBzZW50IHRvICh0aGlzIHNob3VsZCBtYXRjaCBhbiBFdmVudClcclxuICAgIGNvbnN0IHRvID0gcmVxdWVzdC5wYXJhbSgnVG8nKS5zbGljZSgxKTtcclxuXHJcbiAgICAvLyB0aGUgdm90ZXIsIHVzZSB0aGlzIHRvIGtlZXAgcGVvcGxlIGZyb20gdm90aW5nIG1vcmUgdGhhbiBvbmNlXHJcbiAgICBjb25zdCBmcm9tID0gcmVxdWVzdC5wYXJhbSgnRnJvbScpO1xyXG4gICAgY29uc29sZS5sb2coYFZvdGUgcmVjZWl2ZWQgLSBCb2R5OiAke2JvZHl9IEZyb206ICR7ZnJvbX0gVG86ICR7dG99YCk7XHJcblxyXG4gICAgbGV0IGV2ZW50czogRXZlbnREb2N1bWVudFtdO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBldmVudHMgPSBhd2FpdCBFdmVudE1vZGVsXHJcbiAgICAgICAgICAgIC5maW5kKCB7IFBob25lTnVtYmVyOiB0byB9IClcclxuICAgICAgICAgICAgLmxpbWl0KDEpXHJcbiAgICAgICAgICAgIC5leGVjKCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgIHJlc3BvbnNlLnNlbmQoJzxSZXNwb25zZT5Tb3JyeSEgT3VyIHN5c3RlbSBlbmNvdW50ZXJlZCBhbiBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi48L1Jlc3BvbnNlPicpO1xyXG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZXZlbnQgPSBldmVudHNbMF07XHJcblxyXG4gICAgaWYgKGV2ZW50cy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYE5vIGV2ZW50IGlzIGNvbmZpZ3VyZWQgYXQgdGhpcyBudW1iZXI6ICR7dG99YCk7XHJcbiAgICAgICAgLy8gc2lsZW50bHkgZmFpbCBmb3IgdGhlIHVzZXJcclxuICAgICAgICByZXNwb25zZS5zZW5kKCc8UmVzcG9uc2U+PFNtcz5Tb3JyeSEgTm8gZXZlbnQgaXMgY3VycmVudGx5IHJ1bm5pbmcgYXQgdGhpcyBudW1iZXIuIFBsZWFzZSBjaGVjayB0aGUgbnVtYmVyIGFuZCB0cnkgYWdhaW4uPC9TbXM+PC9SZXNwb25zZT4nKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCFldmVudC5FbmFibGVkKSB7XHJcbiAgICAgICAgcmVzcG9uc2Uuc2VuZCgnPFJlc3BvbnNlPjxTbXM+Vm90aW5nIGlzIG5vdyBjbG9zZWQuPC9TbXM+PC9SZXNwb25zZT4nKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCF1dGlscy50ZXN0aW50KGJvZHkpKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0JhZCB2b3RlOiAnICsgZXZlbnQuTmFtZSArICcsICcgKyBmcm9tICsgJywgJyArIGJvZHkpO1xyXG4gICAgICAgIHJlc3BvbnNlLnNlbmQoJzxSZXNwb25zZT48U21zPlNvcnJ5LCBpbnZhbGlkIHZvdGUuIFBsZWFzZSB0ZXh0IGEgbnVtYmVyIGJldHdlZW4gMSBhbmQgJyArIGV2ZW50LkNvbnRlc3RhbnRzLmxlbmd0aCArICc8L1Ntcz48L1Jlc3BvbnNlPicpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIWV2ZW50LkN1cnJlbnRSb3VuZCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBObyByb3VuZCBpcyBjdXJyZW50bHkgc2VsZWN0ZWQgZm9yIGV2ZW50OiAke2V2ZW50Lk5hbWV9YCk7XHJcbiAgICAgICAgcmVzcG9uc2Uuc2VuZCgnPFJlc3BvbnNlPjxTbXM+Vm90aW5nIGlzIG5vdyBjbG9zZWQuPC9TbXM+PC9SZXNwb25zZT4nKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHV0aWxzLnRlc3RpbnQoYm9keSkgJiYgKHBhcnNlSW50KGJvZHkpIDw9IDAgfHwgIWV2ZW50LkN1cnJlbnRSb3VuZC5Db250ZXN0YW50cy5tYXAoYyA9PiBjLkNvbnRlc3RhbnROdW1iZXIpLmNvbnRhaW5zKHBhcnNlSW50KGJvZHkpKSkpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnQmFkIHZvdGU6ICcgKyBldmVudC5OYW1lICsgJywgJyArIGZyb20gKyAnLCAnICsgYm9keSArICcsICcgKyAoJ1sxLScgKyBldmVudC5Db250ZXN0YW50cy5sZW5ndGggKyAnXScpKTtcclxuICAgICAgICByZXNwb25zZS5zZW5kKCc8UmVzcG9uc2U+PFNtcz5Tb3JyeSwgaW52YWxpZCB2b3RlLiBQbGVhc2UgdGV4dCBhIG51bWJlciBiZXR3ZWVuIDEgYW5kICcgKyBldmVudC5Db250ZXN0YW50cy5sZW5ndGggKyAnPC9TbXM+PC9SZXNwb25zZT4nKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGV2ZW50Lmhhc1ZvdGVkKGZyb20pKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0Rlbnlpbmcgdm90ZTogJyArIGV2ZW50Lk5hbWUgKyAnLCAnICsgZnJvbSArICcgLSBBbHJlYWR5IHZvdGVkJyk7XHJcbiAgICAgICAgcmVzcG9uc2Uuc2VuZCgnPFJlc3BvbnNlPjxTbXM+U29ycnksIHlvdSBhcmUgb25seSBhbGxvd2VkIHRvIHZvdGUgb25jZSBwZXIgcm91bmQuPC9TbXM+PC9SZXNwb25zZT4nKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGNob2ljZSA9IHBhcnNlSW50KGJvZHkpO1xyXG4gICAgICAgIGNvbnN0IHJlZ2lzdHJhdGlvbiA9IGV2ZW50LlJlZ2lzdHJhdGlvbnMuZmluZChyID0+IHIuUGhvbmVOdW1iZXIgPT0gZnJvbSk7XHJcblxyXG4gICAgICAgIGV2ZW50LkN1cnJlbnRSb3VuZC5Db250ZXN0YW50c1xyXG4gICAgICAgICAgICAuZmluZChjID0+IGMuQ29udGVzdGFudE51bWJlciA9PT0gY2hvaWNlKVxyXG4gICAgICAgICAgICAuVm90ZXMucHVzaChyZWdpc3RyYXRpb24pO1xyXG5cclxuICAgICAgICBldmVudC5zYXZlKChlcnIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2Uuc2VuZCgnPFJlc3BvbnNlPjxTbXM+V2UgZW5jb3VudGVyZWQgYW4gZXJyb3Igc2F2aW5nIHlvdXIgdm90ZS4gVHJ5IGFnYWluPzwvU21zPjwvUmVzcG9uc2U+Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQWNjZXB0aW5nIHZvdGU6ICcgKyBldmVudC5OYW1lICsgJywgJyArIGZyb20pO1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2Uuc2VuZCgnPFJlc3BvbnNlPjxTbXM+VGhhbmtzIGZvciB5b3VyIHZvdGUgZm9yICcgKyBldmVudC5OYW1lICsgJy4gUG93ZXJlZCBieSBUd2lsaW8uPC9TbXM+PC9SZXNwb25zZT4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNhdmVFdmVudCA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xyXG4gICAgY29uc3QgZHRvOiBFdmVudENvbmZpZ0RUTyA9IHJlcS5ib2R5O1xyXG4gICAgbGV0IHNhdmVkRXZlbnQ6IEV2ZW50RG9jdW1lbnQ7XHJcbiAgICBpZiAoIWR0by5faWQpIHtcclxuICAgICAgICBjb25zdCBldmVudERUTzogRXZlbnREVE8gPSBkdG8gYXMgRXZlbnREVE87XHJcbiAgICAgICAgZXZlbnREVE8uUm91bmRzID0gZXZlbnREVE8uUm91bmRzLm1hcChyID0+IHtcclxuICAgICAgICAgICAgICAgIHIuSXNGaW5pc2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50TW9kZWwoZXZlbnREVE8pO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHNhdmVkRXZlbnQgPSBhd2FpdCBldmVudC5zYXZlKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0KGVycik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZXN1bHQ6IERhdGFPcGVyYXRpb25SZXN1bHQ8RXZlbnREVE8+ID0ge1xyXG4gICAgICAgICAgICBTdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICBEYXRhOiBzYXZlZEV2ZW50XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXMuanNvbihyZXN1bHQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzYXZlZEV2ZW50ID0gYXdhaXQgRXZlbnRNb2RlbC5maW5kQnlJZEFuZFVwZGF0ZShkdG8uX2lkLCBkdG8sIHsgdXBzZXJ0OiB0cnVlIH0pO1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IERhdGFPcGVyYXRpb25SZXN1bHQ8RXZlbnREVE8+ID0ge1xyXG4gICAgICAgICAgICAgICAgU3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIERhdGE6IHNhdmVkRXZlbnRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0KTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZGVsZXRlRXZlbnQgPSAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcclxuICAgIEV2ZW50TW9kZWwuZmluZEJ5SWRBbmRSZW1vdmUocmVxLnBhcmFtcy5ldmVudElkLCAoZXJyLCBwcm9kdWN0OiBFdmVudERvY3VtZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBPcGVyYXRpb25SZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIFN1Y2Nlc3M6IHRydWVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXMuanNvbihyZXN1bHQpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RXZlbnRzID0gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbiAgICBFdmVudE1vZGVsLmZpbmQoKGVyciwgZXZlbnRzOiBFdmVudERvY3VtZW50W10pID0+IHtcclxuICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0KGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV2ZW50cyA9IGV2ZW50cy5tYXAodiA9PiB7XHJcbiAgICAgICAgICAgIHYuQ29udGVzdGFudHMgPSB2LkNvbnRlc3RhbnRzLnNvcnQoKGMxLCBjMikgPT4gYzEuQ29udGVzdGFudE51bWJlciAtIGMyLkNvbnRlc3RhbnROdW1iZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXMuanNvbihldmVudHMpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RXZlbnQgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcclxuICAgIGxldCBldmVudDogRXZlbnREb2N1bWVudDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZXZlbnQgPSBhd2FpdCBFdmVudE1vZGVsLmZpbmRCeUlkKHJlcS5wYXJhbXMuZXZlbnRJZCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcclxuICAgIH1cclxuICAgIGV2ZW50LkNvbnRlc3RhbnRzID0gZXZlbnQuQ29udGVzdGFudHMuc29ydCgoYzEsIGMyKSA9PiBjMS5Db250ZXN0YW50TnVtYmVyIC0gYzIuQ29udGVzdGFudE51bWJlcik7XHJcbiAgICByZXMuanNvbihldmVudCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW5jcmVtZW50Um91bmQgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcclxuICAgIGxldCBldmVudDogRXZlbnREb2N1bWVudDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZXZlbnQgPSBhd2FpdCBFdmVudE1vZGVsLmZpbmRCeUlkKHJlcS5wYXJhbXMuZXZlbnRJZCk7XHJcblxyXG4gICAgICAgIGlmIChldmVudC5DdXJyZW50Um91bmQpIHsgLy8gaWYgYSByb3VuZCBpcyBydW5uaW5nLCBjb21wbGV0ZSBpdFxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coYENsb3Npbmcgcm91bmQgJHtldmVudC5DdXJyZW50Um91bmQuUm91bmROdW1iZXJ9YCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Um91bmQgPSBldmVudC5Sb3VuZHNcclxuICAgICAgICAgICAgICAgIC5maW5kKHIgPT4gci5Sb3VuZE51bWJlciA9PSBldmVudC5DdXJyZW50Um91bmQuUm91bmROdW1iZXIpO1xyXG4gICAgICAgICAgICBjdXJyZW50Um91bmQuSXNGaW5pc2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGN1cnJlbnRSb3VuZC5Db250ZXN0YW50cyA9IGV2ZW50LkN1cnJlbnRSb3VuZC5Db250ZXN0YW50cztcclxuICAgICAgICAgICAgZXZlbnQuQ3VycmVudFJvdW5kID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXZlbnQuc2F2ZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBvcGVyYXRpb25SZXN1bHQ6IERhdGFPcGVyYXRpb25SZXN1bHQ8RXZlbnREVE8+ID0ge1xyXG4gICAgICAgICAgICAgICAgU3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIERhdGE6IHJlc3VsdFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXMuanNvbihvcGVyYXRpb25SZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlUm91bmRzID0gZXZlbnQuUm91bmRzLmZpbHRlcihyID0+ICFyLklzRmluaXNoZWQpO1xyXG4gICAgICAgICAgICBpZiAoYXZhaWxhYmxlUm91bmRzLmxlbmd0aCA+IDApIHsgLy8gaWYgdGhlcmUgYXJlIGFueSByb3VuZHMgbGVmdCwgc3RhcnQgdGhlIG5leHQgb25lXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Um91bmQgPSBhdmFpbGFibGVSb3VuZHMucmVkdWNlKChwcmV2LCBjdXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldi5Sb3VuZE51bWJlciA8IGN1ci5Sb3VuZE51bWJlciA/IHByZXYgOiBjdXI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgU3RhcnRpbmcgcm91bmQgJHtuZXh0Um91bmQuUm91bmROdW1iZXJ9YCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZXZlbnQuQ3VycmVudFJvdW5kID0gbmV4dFJvdW5kO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXZlbnQuc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3BlcmF0aW9uUmVzdWx0OiBEYXRhT3BlcmF0aW9uUmVzdWx0PEV2ZW50RFRPPiA9IHtcclxuICAgICAgICAgICAgICAgICAgICBTdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIERhdGE6IHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJlcy5qc29uKG9wZXJhdGlvblJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7IC8vIGNhbid0IGluY3JlbWVudCBiZWNhdXNlIGFsbCByb3VuZHMgYXJlIGZpbmlzaGVkLiByZXR1cm4gZmFpbHVyZS5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBdHRlbXB0ZWQgdG8gaW5jcmVtZW50IHJvdW5kIG9uIGZpbmlzaGVkIGV2ZW50LicpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3BlcmF0aW9uUmVzdWx0OiBPcGVyYXRpb25SZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3VjY2VzczogZmFsc2VcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXMuanNvbihvcGVyYXRpb25SZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XHJcbiAgICB9XHJcbn07Il19
