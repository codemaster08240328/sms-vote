"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Event_1 = require("../models/Event");
const Contestant_1 = require("../models/Contestant");
const utils = require("../utils");
const Twilio = require("twilio");
const utils_1 = require("../utils");
const User_1 = require("../models/User");
async function getAnnounce(req, res) {
    const event = await Event_1.default.findById(req.params.eventId);
    res.render('announce', {
        title: 'Announcement',
        EventName: event.Name,
        EventId: event._id
    });
}
exports.getAnnounce = getAnnounce;
exports.announce = async (req, res, next) => {
    console.log(`announce() called at ${new Date().toISOString()}`);
    const message = req.param('Message').trim();
    try {
        const event = await Event_1.default
            .findById(req.params.eventId)
            .populate('Registrations')
            .exec();
        const twilioClient = Twilio();
        event.Registrations.forEach(registrant => {
            console.log(`Sending message: ${message} From: ${event.PhoneNumber} To: ${registrant.PhoneNumber}`);
            twilioClient.messages.create({
                from: event.PhoneNumber,
                to: registrant.PhoneNumber,
                body: message
            });
        });
        req.flash('success', { msg: 'Success! Message sent to all participants!' });
        res.redirect('/');
    }
    catch (err) {
        console.log(err);
        return next(err);
    }
};
exports.voteSMS = async (req, res, next) => {
    res.header('Content-Type', 'text/xml');
    console.log(`voteSMS() called at ${new Date().toISOString()}`);
    const body = req.param('Body').trim();
    // the number the vote it being sent to (this should match an Event)
    const to = req.param('To').slice(1);
    // the voter, use this to keep people from voting more than once
    const from = req.param('From').replace(/\D/g, '');
    console.log(`Vote received - Body: ${body} From: ${from} To: ${to}`);
    let events;
    try {
        events = await Event_1.default
            .find(({ PhoneNumber: to, Enabled: true }))
            .populate('Registrations')
            .populate('Contestants')
            .populate('Rounds.Contestants.Detail')
            .populate('Rounds.Contestants.Votes')
            .populate('CurrentRound.Contestants.Detail')
            .populate('CurrentRound.Contestants.Votes')
            .exec();
    }
    catch (err) {
        console.log(err);
        res.send('<Response>Sorry! Our system encountered an error. Please try again.</Response>');
        return next(err);
    }
    const event = events[0];
    if (!event) {
        console.log(`No event is configured at this number: ${to}`);
        res.send('<Response><Sms>No event is currently running at this number. Please check the number and try again.</Sms></Response>');
        return;
    }
    const voterRegistration = event.Registrations.find(r => r.PhoneNumber == from);
    if (!voterRegistration) {
        console.log('Phone number is not registered to vote in this event');
        res.send(`<Response><Sms>This number is not yet registered for this event. Please register and try again.</Sms></Response>`);
        return;
    }
    else if (!event.Enabled) {
        res.send('<Response><Sms>Voting is now closed.</Sms></Response>');
        return;
    }
    else if (!event.CurrentRound) {
        console.log(`No round is currently selected for event: ${event.Name}`);
        res.send('<Response><Sms>Voting is currently closed.</Sms></Response>');
        return;
    }
    if (event.hasVoted(from)) {
        console.log('Denying vote: ' + event.Name + ', ' + from + ' - Already voted');
        res.send('<Response><Sms>You are only allowed to vote once per round.</Sms></Response>');
        return;
    }
    const availableOptions = event.CurrentRound.Contestants
        .filter(c => c.Enabled && c.EaselNumber)
        .map(c => c.EaselNumber);
    const availableOptionsString = availableOptions.join(', ');
    if (!utils.testint(body)) {
        console.log('Bad vote: ' + event.Name + ', ' + from + ', ' + body);
        res.send(`<Response><Sms>Invalid vote. Please choose one of the following options: ${availableOptionsString} </Sms></Response>`);
        return;
    }
    const vote = parseInt(body);
    if (!availableOptions.contains(vote)) {
        console.log('Bad vote: ' + event.Name + ', ' + from + ', ' + body + ', Available Options: ' + availableOptionsString);
        res.send(`<Response><Sms>Invalid vote. Please choose one of the following options: ${availableOptionsString} </Sms></Response>`);
        return;
    }
    else {
        const choice = parseInt(body);
        const registration = event.Registrations.find(r => r.PhoneNumber == from);
        const votedFor = event.CurrentRound.Contestants
            .find(c => c.EaselNumber === choice && c.Enabled);
        votedFor.Votes.push(registration);
        event.save((err) => {
            if (err) {
                res.send('<Response><Sms>We encountered an error saving your vote. Try again?</Sms></Response>');
            }
            else {
                console.log('Accepting vote: ' + votedFor.Detail.Name + ', ' + from);
                res.send('<Response><Sms>Thanks for your vote for ' + votedFor.Detail.Name + '.</Sms></Response>');
            }
        });
    }
};
exports.saveEvent = async (req, res, next) => {
    const dto = req.body;
    console.log(`Saving event: ${dto.Name}`);
    let savedEvent;
    try {
        dto.PhoneNumber = dto.PhoneNumber.trim();
        if (!dto.PhoneNumber) {
            const error = 'Invalid event record. No PhoneNumber provided.';
            console.error(error);
            throw error;
        }
        if (!utils_1.IsPhoneNumber(dto.PhoneNumber)) {
            const error = `Invalid event record. Phone Number in the wrong format ${dto.PhoneNumber}.`;
            console.error(error);
            throw error;
        }
        dto.PhoneNumber = utils_1.SanitizePhoneNumber(dto.PhoneNumber);
        dto.Contestants.map(contestant => Contestant_1.default.findByIdAndUpdate(contestant._id, contestant, { upsert: true }).exec())
            .forEach(async (promise) => await promise);
        let event = await Event_1.default
            .findById(dto._id)
            .exec();
        if (!event) {
            const eventDTO = dto;
            eventDTO.Rounds = eventDTO.Rounds.map(r => {
                r.IsFinished = false;
                return r;
            });
            event = new Event_1.default(eventDTO);
            savedEvent = await event.save();
            const result = {
                Success: true,
                Data: savedEvent
            };
            res.json(result);
        }
        else {
            event.edit(dto);
            savedEvent = await event.save();
            const result = {
                Success: true,
                Data: savedEvent
            };
            res.json(result);
        }
    }
    catch (err) {
        return next(err);
    }
};
// OBSOLETE: Never delete events
// export const deleteEvent = (req: Request, res: Response, next: NextFunction) => {
//     EventModel.findByIdAndRemove(req.params.eventId, (err, product: EventDocument) => {
//         if (err) {
//             return next(err);
//         }
//         const result: OperationResult = {
//             Success: true
//         };
//         res.json(result);
//     });
// };
exports.archiveEvent = async (req, res, next) => {
    const event = await Event_1.default.findById(req.params.eventId);
    event.Enabled = false;
    await event.save();
    const result = {
        Success: true
    };
    res.json(result);
};
exports.getEvents = async (req, res, next) => {
    try {
        const user = await User_1.default.findById(req.user.id);
        let query = Event_1.default.find()
            .populate('Contestants')
            .populate('Rounds.Contestants.Detail')
            .populate('Rounds.Contestants.Votes')
            .populate('CurrentRound.Contestants.Detail')
            .populate('CurrentRound.Contestants.Votes');
        if (!user.isAdmin) {
            query = query.where('Enabled').equals(true);
        }
        const events = await query.exec();
        res.json(events);
    }
    catch (err) {
        return next(err);
    }
};
exports.getEvent = async (req, res, next) => {
    let event;
    try {
        const user = await User_1.default.findById(req.user.id);
        event = await Event_1.default
            .findById(req.params.eventId)
            .populate('Contestants')
            .populate('Rounds.Contestants.Detail')
            .populate('Rounds.Contestants.Votes')
            .populate('CurrentRound.Contestants.Detail')
            .populate('CurrentRound.Contestants.Votes')
            .exec();
        if (event.Enabled || (user.isAdmin && !event.Enabled)) {
            res.json(event);
        }
    }
    catch (err) {
        return next(err);
    }
};
exports.incrementRound = async (req, res, next) => {
    let event;
    try {
        event = await Event_1.default.findById(req.params.eventId);
        if (event.CurrentRound) { // if a round is running, complete it
            console.log(`Closing round ${event.CurrentRound.RoundNumber}`);
            const currentRound = event.Rounds
                .find(r => r.RoundNumber == event.CurrentRound.RoundNumber);
            currentRound.IsFinished = true;
            currentRound.Contestants = event.CurrentRound.Contestants;
            event.CurrentRound = null;
            const result = await event.save();
            const operationResult = {
                Success: true,
                Data: result
            };
            res.json(operationResult);
        }
        else {
            const availableRounds = event.Rounds.filter(r => !r.IsFinished);
            if (availableRounds.length > 0) { // if there are any rounds left, start the next one
                const nextRound = availableRounds.reduce((prev, cur) => {
                    return prev.RoundNumber < cur.RoundNumber ? prev : cur;
                });
                console.log(`Starting round ${nextRound.RoundNumber}`);
                event.CurrentRound = nextRound;
                const result = await event.save();
                const operationResult = {
                    Success: true,
                    Data: result
                };
                res.json(operationResult);
            }
            else { // loop if all rounds are finished.
                console.log('Attempted to increment round on finished event. Looping rounds.');
                event.Rounds.forEach(r => r.IsFinished = false);
                event.CurrentRound = null;
                const result = await event.save();
                const operationResult = {
                    Success: true,
                    Data: result
                };
                res.json(operationResult);
                // console.log('Attempted to increment round on finished event.');
                // const operationResult: OperationResult = {
                //     Success: false
                // };
                // res.json(operationResult);
            }
        }
    }
    catch (err) {
        return next(err);
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,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cEI7QUFDTCxDQUFDLENBQUMiLCJmaWxlIjoiY29udHJvbGxlcnMvZXZlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCB7IGRlZmF1bHQgYXMgRXZlbnRNb2RlbCwgRXZlbnREb2N1bWVudCB9IGZyb20gJy4uL21vZGVscy9FdmVudCc7XHJcbmltcG9ydCBDb250ZXN0YW50TW9kZWwgZnJvbSAnLi4vbW9kZWxzL0NvbnRlc3RhbnQnO1xyXG5pbXBvcnQgeyBSb3VuZERUTyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Sb3VuZERUTyc7XHJcbmltcG9ydCB7IEV2ZW50Q29udGVzdGFudERUTyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Db250ZXN0YW50RFRPJztcclxuaW1wb3J0IFJvdW5kQ29udGVzdGFudERUTyBmcm9tICcuLi8uLi8uLi9zaGFyZWQvUm91bmRDb250ZXN0YW50RFRPJztcclxuaW1wb3J0IHsgRXZlbnREVE8gfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvRXZlbnREVE8nO1xyXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCB7IERhdGFPcGVyYXRpb25SZXN1bHQsIE9wZXJhdGlvblJlc3VsdCwgQ3JlYXRlT3BlcmF0aW9uUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL09wZXJhdGlvblJlc3VsdCc7XHJcbmltcG9ydCB7IG5leHRUaWNrIH0gZnJvbSAncS9pbmRleCc7XHJcbmltcG9ydCAqIGFzIFR3aWxpbyBmcm9tICd0d2lsaW8nO1xyXG5pbXBvcnQgeyBJc1Bob25lTnVtYmVyLCBTYW5pdGl6ZVBob25lTnVtYmVyIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFVzZXIsIFVzZXJEb2N1bWVudCB9IGZyb20gJy4uL21vZGVscy9Vc2VyJztcclxuaW1wb3J0IHsgQXV0aFRva2VuIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL1VzZXJEVE8nO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFubm91bmNlKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkge1xyXG4gICAgY29uc3QgZXZlbnQgPSBhd2FpdCBFdmVudE1vZGVsLmZpbmRCeUlkKHJlcS5wYXJhbXMuZXZlbnRJZCk7XHJcbiAgICByZXMucmVuZGVyKCdhbm5vdW5jZScsIHtcclxuICAgICAgICB0aXRsZTogJ0Fubm91bmNlbWVudCcsXHJcbiAgICAgICAgRXZlbnROYW1lOiBldmVudC5OYW1lLFxyXG4gICAgICAgIEV2ZW50SWQ6IGV2ZW50Ll9pZFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuZXhwb3J0IGNvbnN0IGFubm91bmNlID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgYW5ub3VuY2UoKSBjYWxsZWQgYXQgJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YCk7XHJcblxyXG4gICAgY29uc3QgbWVzc2FnZSA9IHJlcS5wYXJhbSgnTWVzc2FnZScpLnRyaW0oKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZXZlbnQgPSBhd2FpdCBFdmVudE1vZGVsXHJcbiAgICAgICAgICAgIC5maW5kQnlJZChyZXEucGFyYW1zLmV2ZW50SWQpXHJcbiAgICAgICAgICAgIC5wb3B1bGF0ZSgnUmVnaXN0cmF0aW9ucycpXHJcbiAgICAgICAgICAgIC5leGVjKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHR3aWxpb0NsaWVudCA9IFR3aWxpbygpO1xyXG5cclxuICAgICAgICBldmVudC5SZWdpc3RyYXRpb25zLmZvckVhY2gocmVnaXN0cmFudCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTZW5kaW5nIG1lc3NhZ2U6ICR7bWVzc2FnZX0gRnJvbTogJHtldmVudC5QaG9uZU51bWJlcn0gVG86ICR7cmVnaXN0cmFudC5QaG9uZU51bWJlcn1gKTtcclxuICAgICAgICAgICAgdHdpbGlvQ2xpZW50Lm1lc3NhZ2VzLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICBmcm9tOiBldmVudC5QaG9uZU51bWJlcixcclxuICAgICAgICAgICAgICAgIHRvOiByZWdpc3RyYW50LlBob25lTnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgYm9keTogbWVzc2FnZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxLmZsYXNoKCdzdWNjZXNzJywgeyBtc2c6ICdTdWNjZXNzISBNZXNzYWdlIHNlbnQgdG8gYWxsIHBhcnRpY2lwYW50cyEnIH0pO1xyXG4gICAgICAgIHJlcy5yZWRpcmVjdCgnLycpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xyXG4gICAgfVxyXG5cclxufTtcclxuXHJcblxyXG5leHBvcnQgY29uc3Qgdm90ZVNNUyA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xyXG4gICAgcmVzLmhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQveG1sJyk7XHJcblxyXG4gICAgY29uc29sZS5sb2coYHZvdGVTTVMoKSBjYWxsZWQgYXQgJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YCk7XHJcblxyXG4gICAgY29uc3QgYm9keSA9IHJlcS5wYXJhbSgnQm9keScpLnRyaW0oKTtcclxuICAgIC8vIHRoZSBudW1iZXIgdGhlIHZvdGUgaXQgYmVpbmcgc2VudCB0byAodGhpcyBzaG91bGQgbWF0Y2ggYW4gRXZlbnQpXHJcbiAgICBjb25zdCB0byA9IHJlcS5wYXJhbSgnVG8nKS5zbGljZSgxKTtcclxuXHJcbiAgICAvLyB0aGUgdm90ZXIsIHVzZSB0aGlzIHRvIGtlZXAgcGVvcGxlIGZyb20gdm90aW5nIG1vcmUgdGhhbiBvbmNlXHJcbiAgICBjb25zdCBmcm9tID0gcmVxLnBhcmFtKCdGcm9tJykucmVwbGFjZSgvXFxEL2csICcnKTtcclxuICAgIGNvbnNvbGUubG9nKGBWb3RlIHJlY2VpdmVkIC0gQm9keTogJHtib2R5fSBGcm9tOiAke2Zyb219IFRvOiAke3RvfWApO1xyXG5cclxuICAgIGxldCBldmVudHM6IEV2ZW50RG9jdW1lbnRbXTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZXZlbnRzID0gYXdhaXQgRXZlbnRNb2RlbFxyXG4gICAgICAgICAgICAuZmluZCgoIHsgUGhvbmVOdW1iZXI6IHRvLCBFbmFibGVkOiB0cnVlIH0gKSlcclxuICAgICAgICAgICAgLnBvcHVsYXRlKCdSZWdpc3RyYXRpb25zJylcclxuICAgICAgICAgICAgLnBvcHVsYXRlKCdDb250ZXN0YW50cycpXHJcbiAgICAgICAgICAgIC5wb3B1bGF0ZSgnUm91bmRzLkNvbnRlc3RhbnRzLkRldGFpbCcpXHJcbiAgICAgICAgICAgIC5wb3B1bGF0ZSgnUm91bmRzLkNvbnRlc3RhbnRzLlZvdGVzJylcclxuICAgICAgICAgICAgLnBvcHVsYXRlKCdDdXJyZW50Um91bmQuQ29udGVzdGFudHMuRGV0YWlsJylcclxuICAgICAgICAgICAgLnBvcHVsYXRlKCdDdXJyZW50Um91bmQuQ29udGVzdGFudHMuVm90ZXMnKVxyXG4gICAgICAgICAgICAuZXhlYygpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICByZXMuc2VuZCgnPFJlc3BvbnNlPlNvcnJ5ISBPdXIgc3lzdGVtIGVuY291bnRlcmVkIGFuIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLjwvUmVzcG9uc2U+Jyk7XHJcbiAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBldmVudCA9IGV2ZW50c1swXTtcclxuXHJcbiAgICBpZiAoIWV2ZW50KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYE5vIGV2ZW50IGlzIGNvbmZpZ3VyZWQgYXQgdGhpcyBudW1iZXI6ICR7dG99YCk7XHJcbiAgICAgICAgcmVzLnNlbmQoJzxSZXNwb25zZT48U21zPk5vIGV2ZW50IGlzIGN1cnJlbnRseSBydW5uaW5nIGF0IHRoaXMgbnVtYmVyLiBQbGVhc2UgY2hlY2sgdGhlIG51bWJlciBhbmQgdHJ5IGFnYWluLjwvU21zPjwvUmVzcG9uc2U+Jyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZvdGVyUmVnaXN0cmF0aW9uID0gZXZlbnQuUmVnaXN0cmF0aW9ucy5maW5kKHIgPT4gci5QaG9uZU51bWJlciA9PSBmcm9tKTtcclxuXHJcbiAgICBpZiAoIXZvdGVyUmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1Bob25lIG51bWJlciBpcyBub3QgcmVnaXN0ZXJlZCB0byB2b3RlIGluIHRoaXMgZXZlbnQnKTtcclxuICAgICAgICByZXMuc2VuZChgPFJlc3BvbnNlPjxTbXM+VGhpcyBudW1iZXIgaXMgbm90IHlldCByZWdpc3RlcmVkIGZvciB0aGlzIGV2ZW50LiBQbGVhc2UgcmVnaXN0ZXIgYW5kIHRyeSBhZ2Fpbi48L1Ntcz48L1Jlc3BvbnNlPmApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH0gZWxzZSBpZiAoIWV2ZW50LkVuYWJsZWQpIHtcclxuICAgICAgICByZXMuc2VuZCgnPFJlc3BvbnNlPjxTbXM+Vm90aW5nIGlzIG5vdyBjbG9zZWQuPC9TbXM+PC9SZXNwb25zZT4nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICghZXZlbnQuQ3VycmVudFJvdW5kKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYE5vIHJvdW5kIGlzIGN1cnJlbnRseSBzZWxlY3RlZCBmb3IgZXZlbnQ6ICR7ZXZlbnQuTmFtZX1gKTtcclxuICAgICAgICByZXMuc2VuZCgnPFJlc3BvbnNlPjxTbXM+Vm90aW5nIGlzIGN1cnJlbnRseSBjbG9zZWQuPC9TbXM+PC9SZXNwb25zZT4nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV2ZW50Lmhhc1ZvdGVkKGZyb20pKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0Rlbnlpbmcgdm90ZTogJyArIGV2ZW50Lk5hbWUgKyAnLCAnICsgZnJvbSArICcgLSBBbHJlYWR5IHZvdGVkJyk7XHJcbiAgICAgICAgcmVzLnNlbmQoJzxSZXNwb25zZT48U21zPllvdSBhcmUgb25seSBhbGxvd2VkIHRvIHZvdGUgb25jZSBwZXIgcm91bmQuPC9TbXM+PC9SZXNwb25zZT4nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXZhaWxhYmxlT3B0aW9ucyA9IGV2ZW50LkN1cnJlbnRSb3VuZC5Db250ZXN0YW50c1xyXG4gICAgICAgIC5maWx0ZXIoYyA9PiBjLkVuYWJsZWQgJiYgYy5FYXNlbE51bWJlcilcclxuICAgICAgICAubWFwKGMgPT4gYy5FYXNlbE51bWJlcik7XHJcbiAgICBjb25zdCBhdmFpbGFibGVPcHRpb25zU3RyaW5nID0gYXZhaWxhYmxlT3B0aW9ucy5qb2luKCcsICcpO1xyXG4gICAgaWYgKCF1dGlscy50ZXN0aW50KGJvZHkpKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0JhZCB2b3RlOiAnICsgZXZlbnQuTmFtZSArICcsICcgKyBmcm9tICsgJywgJyArIGJvZHkpO1xyXG4gICAgICAgIHJlcy5zZW5kKGA8UmVzcG9uc2U+PFNtcz5JbnZhbGlkIHZvdGUuIFBsZWFzZSBjaG9vc2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgb3B0aW9uczogJHthdmFpbGFibGVPcHRpb25zU3RyaW5nfSA8L1Ntcz48L1Jlc3BvbnNlPmApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2b3RlID0gcGFyc2VJbnQoYm9keSk7XHJcblxyXG4gICAgaWYgKCFhdmFpbGFibGVPcHRpb25zLmNvbnRhaW5zKHZvdGUpICkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdCYWQgdm90ZTogJyArIGV2ZW50Lk5hbWUgKyAnLCAnICsgZnJvbSArICcsICcgKyBib2R5ICsgJywgQXZhaWxhYmxlIE9wdGlvbnM6ICcgKyBhdmFpbGFibGVPcHRpb25zU3RyaW5nKTtcclxuICAgICAgICByZXMuc2VuZChgPFJlc3BvbnNlPjxTbXM+SW52YWxpZCB2b3RlLiBQbGVhc2UgY2hvb3NlIG9uZSBvZiB0aGUgZm9sbG93aW5nIG9wdGlvbnM6ICR7YXZhaWxhYmxlT3B0aW9uc1N0cmluZ30gPC9TbXM+PC9SZXNwb25zZT5gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGNob2ljZSA9IHBhcnNlSW50KGJvZHkpO1xyXG4gICAgICAgIGNvbnN0IHJlZ2lzdHJhdGlvbiA9IGV2ZW50LlJlZ2lzdHJhdGlvbnMuZmluZChyID0+IHIuUGhvbmVOdW1iZXIgPT0gZnJvbSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHZvdGVkRm9yID0gZXZlbnQuQ3VycmVudFJvdW5kLkNvbnRlc3RhbnRzXHJcbiAgICAgICAgICAgIC5maW5kKGMgPT4gYy5FYXNlbE51bWJlciA9PT0gY2hvaWNlICYmIGMuRW5hYmxlZCk7XHJcbiAgICAgICAgdm90ZWRGb3IuVm90ZXMucHVzaChyZWdpc3RyYXRpb24pO1xyXG5cclxuICAgICAgICBldmVudC5zYXZlKChlcnIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmVzLnNlbmQoJzxSZXNwb25zZT48U21zPldlIGVuY291bnRlcmVkIGFuIGVycm9yIHNhdmluZyB5b3VyIHZvdGUuIFRyeSBhZ2Fpbj88L1Ntcz48L1Jlc3BvbnNlPicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FjY2VwdGluZyB2b3RlOiAnICsgdm90ZWRGb3IuRGV0YWlsLk5hbWUgKyAnLCAnICsgZnJvbSk7XHJcbiAgICAgICAgICAgICAgICByZXMuc2VuZCgnPFJlc3BvbnNlPjxTbXM+VGhhbmtzIGZvciB5b3VyIHZvdGUgZm9yICcgKyB2b3RlZEZvci5EZXRhaWwuTmFtZSArICcuPC9TbXM+PC9SZXNwb25zZT4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNhdmVFdmVudCA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xyXG4gICAgY29uc3QgZHRvOiBFdmVudERUTyA9IHJlcS5ib2R5O1xyXG4gICAgY29uc29sZS5sb2coYFNhdmluZyBldmVudDogJHtkdG8uTmFtZX1gKTtcclxuICAgIGxldCBzYXZlZEV2ZW50OiBFdmVudERvY3VtZW50O1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBkdG8uUGhvbmVOdW1iZXIgPSBkdG8uUGhvbmVOdW1iZXIudHJpbSgpO1xyXG4gICAgICAgIGlmICghZHRvLlBob25lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gJ0ludmFsaWQgZXZlbnQgcmVjb3JkLiBObyBQaG9uZU51bWJlciBwcm92aWRlZC4nO1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghSXNQaG9uZU51bWJlcihkdG8uUGhvbmVOdW1iZXIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gYEludmFsaWQgZXZlbnQgcmVjb3JkLiBQaG9uZSBOdW1iZXIgaW4gdGhlIHdyb25nIGZvcm1hdCAke2R0by5QaG9uZU51bWJlcn0uYDtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHRvLlBob25lTnVtYmVyID0gU2FuaXRpemVQaG9uZU51bWJlcihkdG8uUGhvbmVOdW1iZXIpO1xyXG5cclxuICAgICAgICBkdG8uQ29udGVzdGFudHMubWFwKGNvbnRlc3RhbnQgPT4gQ29udGVzdGFudE1vZGVsLmZpbmRCeUlkQW5kVXBkYXRlKGNvbnRlc3RhbnQuX2lkLCBjb250ZXN0YW50LCB7IHVwc2VydDogdHJ1ZSB9KS5leGVjKCkpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKGFzeW5jIHByb21pc2UgPT4gYXdhaXQgcHJvbWlzZSk7XHJcblxyXG4gICAgICAgIGxldCBldmVudDogRXZlbnREb2N1bWVudCA9IGF3YWl0IEV2ZW50TW9kZWxcclxuICAgICAgICAgICAgLmZpbmRCeUlkKGR0by5faWQpXHJcbiAgICAgICAgICAgIC5leGVjKCk7XHJcblxyXG4gICAgICAgIGlmICghZXZlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnREVE86IEV2ZW50RFRPID0gZHRvIGFzIEV2ZW50RFRPO1xyXG4gICAgICAgICAgICBldmVudERUTy5Sb3VuZHMgPSBldmVudERUTy5Sb3VuZHMubWFwKHIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHIuSXNGaW5pc2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgZXZlbnQgPSBuZXcgRXZlbnRNb2RlbChldmVudERUTyk7XHJcbiAgICAgICAgICAgIHNhdmVkRXZlbnQgPSBhd2FpdCBldmVudC5zYXZlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IERhdGFPcGVyYXRpb25SZXN1bHQ8RXZlbnREVE8+ID0ge1xyXG4gICAgICAgICAgICAgICAgU3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIERhdGE6IHNhdmVkRXZlbnRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVzLmpzb24ocmVzdWx0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBldmVudC5lZGl0KGR0byk7XHJcbiAgICAgICAgICAgIHNhdmVkRXZlbnQgPSBhd2FpdCBldmVudC5zYXZlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogRGF0YU9wZXJhdGlvblJlc3VsdDxFdmVudERUTz4gPSB7XHJcbiAgICAgICAgICAgICAgICBTdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgRGF0YTogc2F2ZWRFdmVudFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXMuanNvbihyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLy8gT0JTT0xFVEU6IE5ldmVyIGRlbGV0ZSBldmVudHNcclxuLy8gZXhwb3J0IGNvbnN0IGRlbGV0ZUV2ZW50ID0gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbi8vICAgICBFdmVudE1vZGVsLmZpbmRCeUlkQW5kUmVtb3ZlKHJlcS5wYXJhbXMuZXZlbnRJZCwgKGVyciwgcHJvZHVjdDogRXZlbnREb2N1bWVudCkgPT4ge1xyXG4vLyAgICAgICAgIGlmIChlcnIpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIGNvbnN0IHJlc3VsdDogT3BlcmF0aW9uUmVzdWx0ID0ge1xyXG4vLyAgICAgICAgICAgICBTdWNjZXNzOiB0cnVlXHJcbi8vICAgICAgICAgfTtcclxuXHJcbi8vICAgICAgICAgcmVzLmpzb24ocmVzdWx0KTtcclxuLy8gICAgIH0pO1xyXG4vLyB9O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFyY2hpdmVFdmVudCA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xyXG4gICAgY29uc3QgZXZlbnQgPSBhd2FpdCBFdmVudE1vZGVsLmZpbmRCeUlkKHJlcS5wYXJhbXMuZXZlbnRJZCk7XHJcblxyXG4gICAgZXZlbnQuRW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgIGF3YWl0IGV2ZW50LnNhdmUoKTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQ6IE9wZXJhdGlvblJlc3VsdCA9IHtcclxuICAgICAgICBTdWNjZXNzOiB0cnVlXHJcbiAgICB9O1xyXG5cclxuICAgIHJlcy5qc29uKHJlc3VsdCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RXZlbnRzID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHVzZXI6IFVzZXJEb2N1bWVudCA9IGF3YWl0IFVzZXIuZmluZEJ5SWQocmVxLnVzZXIuaWQpO1xyXG5cclxuICAgICAgICBsZXQgcXVlcnkgPSBFdmVudE1vZGVsLmZpbmQoKVxyXG4gICAgICAgICAgICAucG9wdWxhdGUoJ0NvbnRlc3RhbnRzJylcclxuICAgICAgICAgICAgLnBvcHVsYXRlKCdSb3VuZHMuQ29udGVzdGFudHMuRGV0YWlsJylcclxuICAgICAgICAgICAgLnBvcHVsYXRlKCdSb3VuZHMuQ29udGVzdGFudHMuVm90ZXMnKVxyXG4gICAgICAgICAgICAucG9wdWxhdGUoJ0N1cnJlbnRSb3VuZC5Db250ZXN0YW50cy5EZXRhaWwnKVxyXG4gICAgICAgICAgICAucG9wdWxhdGUoJ0N1cnJlbnRSb3VuZC5Db250ZXN0YW50cy5Wb3RlcycpO1xyXG5cclxuICAgICAgICBpZiAoIXVzZXIuaXNBZG1pbikge1xyXG4gICAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LndoZXJlKCdFbmFibGVkJykuZXF1YWxzKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBldmVudHM6IEV2ZW50RG9jdW1lbnRbXSA9IGF3YWl0IHF1ZXJ5LmV4ZWMoKTtcclxuXHJcbiAgICAgICAgcmVzLmpzb24oZXZlbnRzKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEV2ZW50ID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbiAgICBsZXQgZXZlbnQ6IEV2ZW50RG9jdW1lbnQ7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHVzZXI6IFVzZXJEb2N1bWVudCA9IGF3YWl0IFVzZXIuZmluZEJ5SWQocmVxLnVzZXIuaWQpO1xyXG5cclxuICAgICAgICBldmVudCA9IGF3YWl0IEV2ZW50TW9kZWxcclxuICAgICAgICAgICAgLmZpbmRCeUlkKHJlcS5wYXJhbXMuZXZlbnRJZClcclxuICAgICAgICAgICAgLnBvcHVsYXRlKCdDb250ZXN0YW50cycpXHJcbiAgICAgICAgICAgIC5wb3B1bGF0ZSgnUm91bmRzLkNvbnRlc3RhbnRzLkRldGFpbCcpXHJcbiAgICAgICAgICAgIC5wb3B1bGF0ZSgnUm91bmRzLkNvbnRlc3RhbnRzLlZvdGVzJylcclxuICAgICAgICAgICAgLnBvcHVsYXRlKCdDdXJyZW50Um91bmQuQ29udGVzdGFudHMuRGV0YWlsJylcclxuICAgICAgICAgICAgLnBvcHVsYXRlKCdDdXJyZW50Um91bmQuQ29udGVzdGFudHMuVm90ZXMnKVxyXG4gICAgICAgICAgICAuZXhlYygpO1xyXG5cclxuICAgICAgICBpZiAoZXZlbnQuRW5hYmxlZCB8fCAodXNlci5pc0FkbWluICYmICFldmVudC5FbmFibGVkKSkge1xyXG4gICAgICAgICAgICByZXMuanNvbihldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW5jcmVtZW50Um91bmQgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcclxuICAgIGxldCBldmVudDogRXZlbnREb2N1bWVudDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZXZlbnQgPSBhd2FpdCBFdmVudE1vZGVsLmZpbmRCeUlkKHJlcS5wYXJhbXMuZXZlbnRJZCk7XHJcblxyXG4gICAgICAgIGlmIChldmVudC5DdXJyZW50Um91bmQpIHsgLy8gaWYgYSByb3VuZCBpcyBydW5uaW5nLCBjb21wbGV0ZSBpdFxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coYENsb3Npbmcgcm91bmQgJHtldmVudC5DdXJyZW50Um91bmQuUm91bmROdW1iZXJ9YCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Um91bmQgPSBldmVudC5Sb3VuZHNcclxuICAgICAgICAgICAgICAgIC5maW5kKHIgPT4gci5Sb3VuZE51bWJlciA9PSBldmVudC5DdXJyZW50Um91bmQuUm91bmROdW1iZXIpO1xyXG4gICAgICAgICAgICBjdXJyZW50Um91bmQuSXNGaW5pc2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGN1cnJlbnRSb3VuZC5Db250ZXN0YW50cyA9IGV2ZW50LkN1cnJlbnRSb3VuZC5Db250ZXN0YW50cztcclxuICAgICAgICAgICAgZXZlbnQuQ3VycmVudFJvdW5kID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXZlbnQuc2F2ZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBvcGVyYXRpb25SZXN1bHQ6IERhdGFPcGVyYXRpb25SZXN1bHQ8RXZlbnREVE8+ID0ge1xyXG4gICAgICAgICAgICAgICAgU3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIERhdGE6IHJlc3VsdFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXMuanNvbihvcGVyYXRpb25SZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlUm91bmRzID0gZXZlbnQuUm91bmRzLmZpbHRlcihyID0+ICFyLklzRmluaXNoZWQpO1xyXG4gICAgICAgICAgICBpZiAoYXZhaWxhYmxlUm91bmRzLmxlbmd0aCA+IDApIHsgLy8gaWYgdGhlcmUgYXJlIGFueSByb3VuZHMgbGVmdCwgc3RhcnQgdGhlIG5leHQgb25lXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Um91bmQgPSBhdmFpbGFibGVSb3VuZHMucmVkdWNlKChwcmV2LCBjdXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldi5Sb3VuZE51bWJlciA8IGN1ci5Sb3VuZE51bWJlciA/IHByZXYgOiBjdXI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgU3RhcnRpbmcgcm91bmQgJHtuZXh0Um91bmQuUm91bmROdW1iZXJ9YCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZXZlbnQuQ3VycmVudFJvdW5kID0gbmV4dFJvdW5kO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXZlbnQuc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3BlcmF0aW9uUmVzdWx0OiBEYXRhT3BlcmF0aW9uUmVzdWx0PEV2ZW50RFRPPiA9IHtcclxuICAgICAgICAgICAgICAgICAgICBTdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIERhdGE6IHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJlcy5qc29uKG9wZXJhdGlvblJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7IC8vIGxvb3AgaWYgYWxsIHJvdW5kcyBhcmUgZmluaXNoZWQuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQXR0ZW1wdGVkIHRvIGluY3JlbWVudCByb3VuZCBvbiBmaW5pc2hlZCBldmVudC4gTG9vcGluZyByb3VuZHMuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZXZlbnQuUm91bmRzLmZvckVhY2gociA9PiByLklzRmluaXNoZWQgPSBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5DdXJyZW50Um91bmQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGV2ZW50LnNhdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcGVyYXRpb25SZXN1bHQ6IERhdGFPcGVyYXRpb25SZXN1bHQ8RXZlbnREVE8+ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgRGF0YTogcmVzdWx0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmVzLmpzb24ob3BlcmF0aW9uUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdBdHRlbXB0ZWQgdG8gaW5jcmVtZW50IHJvdW5kIG9uIGZpbmlzaGVkIGV2ZW50LicpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc3Qgb3BlcmF0aW9uUmVzdWx0OiBPcGVyYXRpb25SZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgU3VjY2VzczogZmFsc2VcclxuICAgICAgICAgICAgICAgIC8vIH07XHJcbiAgICAgICAgICAgICAgICAvLyByZXMuanNvbihvcGVyYXRpb25SZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XHJcbiAgICB9XHJcbn07Il19
