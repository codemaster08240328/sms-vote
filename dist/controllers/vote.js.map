{"version":3,"sources":["controllers/vote.ts"],"names":[],"mappings":"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","file":"vote.js","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { default as VoteSourceModel, VoteSourceDocument } from '../models/VoteSource';\nimport VoteChoiceDTO from '../../../shared/VoteChoiceDTO';\nimport VoteSourceDTO from '../../../shared/VoteSourceDTO';\nimport * as utils from '../utils';\nimport { OperationResult, CreateOperationResult } from '../../../shared/OperationResult';\n\n/**\n * GET /\n * Vote results\n */\nexport let index = (req: Request, res: Response) => {\n    VoteSourceModel.findById(req.query.id, (err, voteSource) => {\n        res.render('vote', {\n            title: `Results for ${voteSource.Name}`\n        });\n    });\n};\n\nexport const voteSMS = (request: Request, response: Response) => {\n    console.log('sms vote received ' + request);\n\n    response.header('Content-Type', 'text/xml');\n    const body = request.param('Body').trim();\n\n    // the number the vote it being sent to (this should match an Event)\n    const to = request.param('To').slice(1);\n\n    // the voter, use this to keep people from voting more than once\n    const from = request.param('From');\n\n    VoteSourceModel.find( { PhoneNumber: to } )\n        .limit(1)\n        .exec((err, votes: VoteSourceDocument[]) => {\n        const vote = votes[0];\n        if (err || votes.length < 1) {\n            console.log(err);\n            // silently fail for the user\n            response.send('<Response></Response>');\n        }\n        else if (!vote.Enabled) {\n            response.send('<Response><Sms>Voting is now closed.</Sms></Response>');\n        }\n        else if (!utils.testint(body)) {\n            console.log('Bad vote: ' + vote.Name + ', ' + from + ', ' + body);\n            response.send('<Response><Sms>Sorry, invalid vote. Please text a number between 1 and ' + vote.Choices.length + '</Sms></Response>');\n        }\n        else if (utils.testint(body) && (parseInt(body) <= 0 || !vote.Choices.map(c => c.VoteKey).contains(parseInt(body)))) {\n            console.log('Bad vote: ' + vote.Name + ', ' + from + ', ' + body + ', ' + ('[1-' + vote.Choices.length + ']'));\n            response.send('<Response><Sms>Sorry, invalid vote. Please text a number between 1 and ' + vote.Choices.length + '</Sms></Response>');\n        }\n        else if (vote.hasVoted(from)) {\n            console.log('Denying vote: ' + vote.Name + ', ' + from);\n            response.send('<Response><Sms>Sorry, you are only allowed to vote once.</Sms></Response>');\n        }\n        else {\n            const choice = parseInt(body);\n\n            vote.Choices\n                .find(c => c.VoteKey === choice)\n                .Numbers.push(from);\n\n            vote.save((err) => {\n                if (err) {\n                    response.send('<Response><Sms>We encountered an error saving your vote. Try again?</Sms></Response>');\n                }\n                else {\n                    console.log('Accepting vote: ' + vote.Name + ', ' + from);\n                    response.send('<Response><Sms>Thanks for your vote for ' + vote.Name + '. Powered by Twilio.</Sms></Response>');\n                }\n            });\n        }\n    });\n};\n\nexport const saveVote = (req: Request, res: Response, next: NextFunction) => {\n    const dto: VoteSourceDTO = req.body;\n    if (!dto._id) {\n        const vote = new VoteSourceModel(dto);\n        vote.save((err: any, product: VoteSourceDocument) => {\n            if (err) {\n                return next(err);\n            }\n\n            const result: CreateOperationResult = {\n                Success: true,\n                Id: product._id\n            };\n            res.json(result);\n        });\n    } else {\n        VoteSourceModel.findByIdAndUpdate(dto._id,\n            {\n                Name: dto.Name,\n                PhoneNumber: dto.PhoneNumber,\n                Enabled: dto.Enabled,\n                Choices: dto.Choices\n            },\n            { upsert: true },\n            (err: any, product: VoteSourceDocument) => {\n                if (err) {\n                    return next(err);\n                }\n\n                const result: CreateOperationResult = {\n                    Success: true,\n                    Id: product._id\n                };\n                res.json(result);\n            });\n    }\n};\n\nexport const deleteVote = (req: Request, res: Response, next: NextFunction) => {\n    VoteSourceModel.findByIdAndRemove(req.params.voteId, (err, product: VoteSourceDocument) => {\n        if (err) {\n            return next(err);\n        }\n\n        const result: OperationResult = {\n            Success: true\n        };\n\n        res.json(result);\n    });\n};\n\nexport const getVotes = (req: Request, res: Response, next: NextFunction) => {\n    VoteSourceModel.find((err, votes: VoteSourceDocument[]) => {\n        if (err) {\n            return next(err);\n        }\n        votes = votes.map(v => {\n            v.Choices = v.Choices.sort((c1, c2) => c1.VoteKey - c2.VoteKey);\n            return v;\n        });\n        res.json(votes);\n    });\n};\n\nexport const getVote = (req: Request, res: Response, next: NextFunction) => {\n    VoteSourceModel.findById(req.params.voteId, (err, vote: VoteSourceDocument) => {\n        if (err) {\n            return next(err);\n        }\n        vote.Choices = vote.Choices.sort((c1, c2) => c1.VoteKey - c2.VoteKey);\n        res.json(vote);\n    });\n};"]}