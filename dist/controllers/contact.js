"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nodemailer = require("nodemailer");
const transporter = nodemailer.createTransport({
    service: 'SendGrid',
    auth: {
        user: process.env.SENDGRID_USER,
        pass: process.env.SENDGRID_PASSWORD
    }
});
/**
 * GET /contact
 * Contact form page.
 */
exports.getContact = (req, res) => {
    res.render('contact', {
        title: 'Contact'
    });
};
/**
 * POST /contact
 * Send a contact form via Nodemailer.
 */
exports.postContact = (req, res) => {
    req.assert('name', 'Name cannot be blank').notEmpty();
    req.assert('email', 'Email is not valid').isEmail();
    req.assert('message', 'Message cannot be blank').notEmpty();
    const errors = req.validationErrors();
    if (errors) {
        req.flash('errors', errors);
        return res.redirect('/contact');
    }
    const mailOptions = {
        to: 'your@email.com',
        from: `${req.body.name} <${req.body.email}>`,
        subject: 'Contact Form',
        text: req.body.message
    };
    transporter.sendMail(mailOptions, (err) => {
        if (err) {
            req.flash('errors', { msg: err.message });
            return res.redirect('/contact');
        }
        req.flash('success', { msg: 'Email has been sent successfully!' });
        res.redirect('/contact');
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2NvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBeUM7QUFLekMsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQztJQUM3QyxPQUFPLEVBQUUsVUFBVTtJQUNuQixJQUFJLEVBQUU7UUFDSixJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhO1FBQy9CLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQjtLQUNwQztDQUNGLENBQUMsQ0FBQztBQUVIOzs7R0FHRztBQUNRLFFBQUEsVUFBVSxHQUFHLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ3RELEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1FBQ3BCLEtBQUssRUFBRSxTQUFTO0tBQ2pCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNRLFFBQUEsV0FBVyxHQUFHLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ3ZELEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLHNCQUFzQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwRCxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRTVELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRXRDLElBQUksTUFBTSxFQUFFO1FBQ1YsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUIsT0FBTyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ2pDO0lBRUQsTUFBTSxXQUFXLEdBQUc7UUFDbEIsRUFBRSxFQUFFLGdCQUFnQjtRQUNwQixJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRztRQUM1QyxPQUFPLEVBQUUsY0FBYztRQUN2QixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPO0tBQ3ZCLENBQUM7SUFFRixXQUFXLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ3hDLElBQUksR0FBRyxFQUFFO1lBQ1AsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDMUMsT0FBTyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsbUNBQW1DLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJmaWxlIjoiY29udHJvbGxlcnMvY29udGFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG5vZGVtYWlsZXIgZnJvbSAnbm9kZW1haWxlcic7XHJcbmltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XHJcblxyXG5pbXBvcnQgZXhwcmVzc1ZhbGlkYXRvciA9IHJlcXVpcmUoJ2V4cHJlc3MtdmFsaWRhdG9yJyk7XHJcblxyXG5jb25zdCB0cmFuc3BvcnRlciA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcclxuICBzZXJ2aWNlOiAnU2VuZEdyaWQnLFxyXG4gIGF1dGg6IHtcclxuICAgIHVzZXI6IHByb2Nlc3MuZW52LlNFTkRHUklEX1VTRVIsXHJcbiAgICBwYXNzOiBwcm9jZXNzLmVudi5TRU5ER1JJRF9QQVNTV09SRFxyXG4gIH1cclxufSk7XHJcblxyXG4vKipcclxuICogR0VUIC9jb250YWN0XHJcbiAqIENvbnRhY3QgZm9ybSBwYWdlLlxyXG4gKi9cclxuZXhwb3J0IGxldCBnZXRDb250YWN0ID0gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xyXG4gIHJlcy5yZW5kZXIoJ2NvbnRhY3QnLCB7XHJcbiAgICB0aXRsZTogJ0NvbnRhY3QnXHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogUE9TVCAvY29udGFjdFxyXG4gKiBTZW5kIGEgY29udGFjdCBmb3JtIHZpYSBOb2RlbWFpbGVyLlxyXG4gKi9cclxuZXhwb3J0IGxldCBwb3N0Q29udGFjdCA9IChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICByZXEuYXNzZXJ0KCduYW1lJywgJ05hbWUgY2Fubm90IGJlIGJsYW5rJykubm90RW1wdHkoKTtcclxuICByZXEuYXNzZXJ0KCdlbWFpbCcsICdFbWFpbCBpcyBub3QgdmFsaWQnKS5pc0VtYWlsKCk7XHJcbiAgcmVxLmFzc2VydCgnbWVzc2FnZScsICdNZXNzYWdlIGNhbm5vdCBiZSBibGFuaycpLm5vdEVtcHR5KCk7XHJcblxyXG4gIGNvbnN0IGVycm9ycyA9IHJlcS52YWxpZGF0aW9uRXJyb3JzKCk7XHJcblxyXG4gIGlmIChlcnJvcnMpIHtcclxuICAgIHJlcS5mbGFzaCgnZXJyb3JzJywgZXJyb3JzKTtcclxuICAgIHJldHVybiByZXMucmVkaXJlY3QoJy9jb250YWN0Jyk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBtYWlsT3B0aW9ucyA9IHtcclxuICAgIHRvOiAneW91ckBlbWFpbC5jb20nLFxyXG4gICAgZnJvbTogYCR7cmVxLmJvZHkubmFtZX0gPCR7cmVxLmJvZHkuZW1haWx9PmAsXHJcbiAgICBzdWJqZWN0OiAnQ29udGFjdCBGb3JtJyxcclxuICAgIHRleHQ6IHJlcS5ib2R5Lm1lc3NhZ2VcclxuICB9O1xyXG5cclxuICB0cmFuc3BvcnRlci5zZW5kTWFpbChtYWlsT3B0aW9ucywgKGVycikgPT4ge1xyXG4gICAgaWYgKGVycikge1xyXG4gICAgICByZXEuZmxhc2goJ2Vycm9ycycsIHsgbXNnOiBlcnIubWVzc2FnZSB9KTtcclxuICAgICAgcmV0dXJuIHJlcy5yZWRpcmVjdCgnL2NvbnRhY3QnKTtcclxuICAgIH1cclxuICAgIHJlcS5mbGFzaCgnc3VjY2VzcycsIHsgbXNnOiAnRW1haWwgaGFzIGJlZW4gc2VudCBzdWNjZXNzZnVsbHkhJyB9KTtcclxuICAgIHJlcy5yZWRpcmVjdCgnL2NvbnRhY3QnKTtcclxuICB9KTtcclxufTtcclxuIl19
