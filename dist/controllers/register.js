"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Registration_1 = require("../models/Registration");
const Event_1 = require("../models/Event");
const utils_1 = require("../utils");
const Twilio = require("twilio");
/**
 * GET /
 * Event/{eventId}/Register
 */
exports.index = async (req, res, next) => {
    let event;
    try {
        event = await Event_1.default
            .findById(req.params.eventId)
            .exec();
    }
    catch (err) {
        console.log(err);
        return next(err);
    }
    res.render('register', {
        title: 'Register voters',
        EventName: event.Name
    });
};
/**
 * GET /
 * api/Event/{eventId}/Registrations
 */
exports.getRegistrations = async (req, res, next) => {
    console.log('getRegistrations()...');
    try {
        const event = await Event_1.default.findById(req.params.eventId).populate('Registrations').exec();
        res.json(event.Registrations);
    }
    catch (err) {
        console.log(err);
        return next(err);
    }
};
/**
 * PUT /
 * api/Event/{eventId}/Registration
 */
exports.registerVoter = async (req, res, next) => {
    const dto = req.body;
    console.log(`Registering ${dto.PhoneNumber}`);
    try {
        if (!dto.PhoneNumber) {
            const error = 'Invalid registration record. No PhoneNumber provided.';
            console.error(error);
            throw error;
        }
        if (!utils_1.IsPhoneNumber(dto.PhoneNumber)) {
            const error = `Invalid registration record. Phone Number in the wrong format ${dto.PhoneNumber}.`;
            console.error(error);
            throw error;
        }
        dto.PhoneNumber = utils_1.SanitizePhoneNumber(dto.PhoneNumber);
        let registration = await Registration_1.default.findOne({ PhoneNumber: dto.PhoneNumber });
        if (registration) {
            registration.FirstName = dto.FirstName;
            registration.LastName = dto.LastName;
            registration.Email = dto.Email;
            registration.PhoneNumber = dto.PhoneNumber;
        }
        else {
            registration = new Registration_1.default(dto);
        }
        const savedRegistration = await registration.save();
        const event = await Event_1.default.findById(req.params.eventId);
        const eventRegistration = event.Registrations.find(rid => rid == savedRegistration._id);
        if (!eventRegistration) {
            event.Registrations.push(savedRegistration._id);
        }
        const savedEvent = await event.save();
        const result = {
            Success: true,
            Data: registration
        };
        const twilioClient = Twilio();
        twilioClient.messages.create({
            from: event.PhoneNumber,
            to: dto.PhoneNumber,
            body: event.RegistrationConfirmationMessage
        });
        console.log(`Successfully registered ${dto.FirstName} ${dto.LastName} - ${dto.PhoneNumber}`);
        res.json(result);
    }
    catch (err) {
        return next(err);
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
