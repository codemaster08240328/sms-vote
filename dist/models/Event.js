"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const RoundContestantSchema = new mongoose.Schema({
    Detail: { type: mongoose.Schema.Types.ObjectId, ref: 'Contestant' },
    Enabled: Boolean,
    EaselNumber: Number,
    Votes: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Registration' }]
});
const RoundSchema = new mongoose.Schema({
    RoundNumber: Number,
    Contestants: [RoundContestantSchema],
    IsFinished: { type: Boolean, default: false }
});
const EventSchema = new mongoose.Schema({
    Name: { type: String, unique: true },
    Contestants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Contestant' }],
    Rounds: [RoundSchema],
    PhoneNumber: String,
    Registrations: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Registration' }],
    CurrentRound: RoundSchema,
    Enabled: Boolean,
    RegistrationConfirmationMessage: String
});
EventSchema.methods.hasVoted = function (phoneNumber) {
    const thisEvent = this;
    return thisEvent.CurrentRound.Contestants.reduce((prev, cur) => prev.concat(cur.Votes.map(v => v.PhoneNumber)), [])
        .find(n => n === phoneNumber) ? true : false;
};
EventSchema.methods.edit = function (dto) {
    const thisEvent = this;
    thisEvent.Name = dto.Name;
    thisEvent.PhoneNumber = dto.PhoneNumber;
    thisEvent.Contestants = dto.Contestants;
    thisEvent.RegistrationConfirmationMessage = dto.RegistrationConfirmationMessage;
    thisEvent.Enabled = dto.Enabled;
    const roundIds = dto.Rounds.map(r => r._id);
    thisEvent.Rounds = thisEvent.Rounds.filter(r => roundIds.contains(r.id));
    thisEvent.Rounds.forEach(r => {
        const roundDto = dto.Rounds.find(x => x._id == r.id);
        const contestantIds = roundDto.Contestants.map(c => c._id);
        r.Contestants = r.Contestants.filter(c => contestantIds.contains(c.id));
        r.Contestants.forEach(c => {
            const contestantDto = roundDto.Contestants.find(x => x._id == c.id);
            c.EaselNumber = contestantDto.EaselNumber;
            c.Enabled = contestantDto.Enabled;
        });
    });
    const newRounds = dto.Rounds.filter(rdto => !thisEvent.Rounds.map(r => r.id).contains(rdto._id));
    thisEvent.Rounds.addRange(newRounds);
};
const EventModel = mongoose.model('Event', EventSchema);
exports.default = EventModel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
