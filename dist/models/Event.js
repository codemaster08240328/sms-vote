"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const RoundContestantSchema = new mongoose.Schema({
    Detail: { type: mongoose.Schema.Types.ObjectId, ref: 'Contestant' },
    Enabled: Boolean,
    EaselNumber: Number,
    Votes: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Registration' }]
});
const RoundSchema = new mongoose.Schema({
    RoundNumber: Number,
    Contestants: [RoundContestantSchema],
    IsFinished: { type: Boolean, default: false }
});
const EventSchema = new mongoose.Schema({
    Name: { type: String, unique: true },
    Contestants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Contestant' }],
    Rounds: [RoundSchema],
    PhoneNumber: String,
    Registrations: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Registration' }],
    CurrentRound: RoundSchema,
    Enabled: Boolean
});
EventSchema.methods.hasVoted = function (phoneNumber) {
    const thisEvent = this;
    return thisEvent.CurrentRound.Contestants.reduce((prev, cur) => prev.concat(cur.Votes.map(v => v.PhoneNumber)), [])
        .find(n => n === phoneNumber) ? true : false;
};
EventSchema.methods.edit = function (dto) {
    const thisEvent = this;
    thisEvent.Name = dto.Name;
    thisEvent.PhoneNumber = dto.PhoneNumber;
    thisEvent.Contestants = dto.Contestants;
    thisEvent.Enabled = dto.Enabled;
    const roundIds = dto.Rounds.map(r => r._id);
    thisEvent.Rounds = thisEvent.Rounds.filter(r => roundIds.contains(r.id));
    thisEvent.Rounds.forEach(r => {
        const roundDto = dto.Rounds.find(x => x._id == r.id);
        const contestantIds = roundDto.Contestants.map(c => c._id);
        r.Contestants = r.Contestants.filter(c => contestantIds.contains(c.id));
        r.Contestants.forEach(c => {
            const contestantDto = roundDto.Contestants.find(x => x._id == c.id);
            c.EaselNumber = contestantDto.EaselNumber;
            c.Enabled = contestantDto.Enabled;
        });
    });
    const newRounds = dto.Rounds.filter(rdto => !thisEvent.Rounds.map(r => r.id).contains(rdto._id));
    thisEvent.Rounds.addRange(newRounds);
};
const EventModel = mongoose.model('Event', EventSchema);
exports.default = EventModel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN6QyxDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFnQixPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDdkUsa0JBQWUsVUFBVSxDQUFDIiwiZmlsZSI6Im1vZGVscy9FdmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcclxuXHJcbmltcG9ydCB7IFJlZ2lzdHJhdGlvblNjaGVtYSB9IGZyb20gJy4vUmVnaXN0cmF0aW9uJztcclxuaW1wb3J0IEV2ZW50RFRPIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9FdmVudERUTyc7XHJcbmltcG9ydCBSb3VuZERUTyBmcm9tICcuLi8uLi8uLi9zaGFyZWQvUm91bmREVE8nO1xyXG5pbXBvcnQgUm91bmRDb250ZXN0YW50RFRPIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Sb3VuZENvbnRlc3RhbnREVE8nO1xyXG5pbXBvcnQgUmVnaXN0cmF0aW9uRFRPIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9SZWdpc3RyYXRpb25EVE8nO1xyXG5pbXBvcnQgeyBydW5JblRoaXNDb250ZXh0IH0gZnJvbSAndm0nO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnREb2N1bWVudCBleHRlbmRzIEV2ZW50RFRPLCBtb25nb29zZS5Eb2N1bWVudCB7XHJcbiAgICBoYXNWb3RlZChwaG9uZU51bWJlcjogc3RyaW5nKTogYm9vbGVhbjtcclxuICAgIGVkaXQoZHRvOiBFdmVudERUTyk6IHZvaWQ7XHJcbn1cclxuXHJcbmNvbnN0IFJvdW5kQ29udGVzdGFudFNjaGVtYTogbW9uZ29vc2UuU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgICBEZXRhaWw6IHsgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6ICdDb250ZXN0YW50J30sXHJcbiAgICBFbmFibGVkOiBCb29sZWFuLFxyXG4gICAgRWFzZWxOdW1iZXI6IE51bWJlcixcclxuICAgIFZvdGVzOiBbeyB0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogJ1JlZ2lzdHJhdGlvbid9XVxyXG59KTtcclxuXHJcbmNvbnN0IFJvdW5kU2NoZW1hOiBtb25nb29zZS5TY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcclxuICAgIFJvdW5kTnVtYmVyOiBOdW1iZXIsXHJcbiAgICBDb250ZXN0YW50czogW1JvdW5kQ29udGVzdGFudFNjaGVtYV0sXHJcbiAgICBJc0ZpbmlzaGVkOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH1cclxufSk7XHJcblxyXG5jb25zdCBFdmVudFNjaGVtYTogbW9uZ29vc2UuU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgICBOYW1lOiB7IHR5cGU6IFN0cmluZywgdW5pcXVlOiB0cnVlIH0sXHJcbiAgICBDb250ZXN0YW50czogW3t0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogJ0NvbnRlc3RhbnQnfV0sXHJcbiAgICBSb3VuZHM6IFtSb3VuZFNjaGVtYV0sXHJcbiAgICBQaG9uZU51bWJlcjogU3RyaW5nLFxyXG4gICAgUmVnaXN0cmF0aW9uczogW3sgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6ICdSZWdpc3RyYXRpb24nIH1dLFxyXG4gICAgQ3VycmVudFJvdW5kOiBSb3VuZFNjaGVtYSxcclxuICAgIEVuYWJsZWQ6IEJvb2xlYW5cclxufSk7XHJcblxyXG5FdmVudFNjaGVtYS5tZXRob2RzLmhhc1ZvdGVkID0gZnVuY3Rpb24ocGhvbmVOdW1iZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IHRoaXNFdmVudCA9ICg8RXZlbnREb2N1bWVudD50aGlzKTtcclxuICAgICAgICByZXR1cm4gdGhpc0V2ZW50LkN1cnJlbnRSb3VuZC5Db250ZXN0YW50cy5yZWR1Y2UoKHByZXY6IHN0cmluZ1tdLCBjdXI6IFJvdW5kQ29udGVzdGFudERUTykgPT4gcHJldi5jb25jYXQoY3VyLlZvdGVzLm1hcCh2ID0+IHYuUGhvbmVOdW1iZXIpKSwgW10pXHJcbiAgICAgICAgICAgIC5maW5kKG4gPT4gbiA9PT0gcGhvbmVOdW1iZXIpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbkV2ZW50U2NoZW1hLm1ldGhvZHMuZWRpdCA9IGZ1bmN0aW9uKGR0bzogRXZlbnREVE8pOiB2b2lkIHtcclxuICAgIGNvbnN0IHRoaXNFdmVudCA9ICg8RXZlbnREb2N1bWVudD50aGlzKTtcclxuICAgIHRoaXNFdmVudC5OYW1lID0gZHRvLk5hbWU7XHJcbiAgICB0aGlzRXZlbnQuUGhvbmVOdW1iZXIgPSBkdG8uUGhvbmVOdW1iZXI7XHJcbiAgICB0aGlzRXZlbnQuQ29udGVzdGFudHMgPSBkdG8uQ29udGVzdGFudHM7XHJcbiAgICB0aGlzRXZlbnQuRW5hYmxlZCA9IGR0by5FbmFibGVkO1xyXG4gICAgY29uc3Qgcm91bmRJZHMgPSBkdG8uUm91bmRzLm1hcChyID0+IHIuX2lkKTtcclxuICAgIHRoaXNFdmVudC5Sb3VuZHMgPSB0aGlzRXZlbnQuUm91bmRzLmZpbHRlcihyID0+IHJvdW5kSWRzLmNvbnRhaW5zKCg8YW55PnIpLmlkKSk7XHJcbiAgICB0aGlzRXZlbnQuUm91bmRzLmZvckVhY2gociA9PiB7XHJcbiAgICAgICAgY29uc3Qgcm91bmREdG8gPSBkdG8uUm91bmRzLmZpbmQoeCA9PiB4Ll9pZCA9PSAoPGFueT5yKS5pZCk7XHJcbiAgICAgICAgY29uc3QgY29udGVzdGFudElkcyA9IHJvdW5kRHRvLkNvbnRlc3RhbnRzLm1hcChjID0+IGMuX2lkKTtcclxuICAgICAgICByLkNvbnRlc3RhbnRzID0gci5Db250ZXN0YW50cy5maWx0ZXIoYyA9PiBjb250ZXN0YW50SWRzLmNvbnRhaW5zKCg8YW55PmMpLmlkKSk7XHJcbiAgICAgICAgci5Db250ZXN0YW50cy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZXN0YW50RHRvID0gcm91bmREdG8uQ29udGVzdGFudHMuZmluZCh4ID0+IHguX2lkID09ICg8YW55PmMpLmlkKTtcclxuICAgICAgICAgICAgYy5FYXNlbE51bWJlciA9IGNvbnRlc3RhbnREdG8uRWFzZWxOdW1iZXI7XHJcbiAgICAgICAgICAgIGMuRW5hYmxlZCA9IGNvbnRlc3RhbnREdG8uRW5hYmxlZDtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgbmV3Um91bmRzID0gZHRvLlJvdW5kcy5maWx0ZXIocmR0byA9PiAhdGhpc0V2ZW50LlJvdW5kcy5tYXAociA9PiAoPGFueT5yKS5pZCkuY29udGFpbnMocmR0by5faWQpKTtcclxuICAgIHRoaXNFdmVudC5Sb3VuZHMuYWRkUmFuZ2UobmV3Um91bmRzKTtcclxufTtcclxuXHJcbmNvbnN0IEV2ZW50TW9kZWwgPSBtb25nb29zZS5tb2RlbDxFdmVudERvY3VtZW50PignRXZlbnQnLCBFdmVudFNjaGVtYSk7XHJcbmV4cG9ydCBkZWZhdWx0IEV2ZW50TW9kZWw7Il19
