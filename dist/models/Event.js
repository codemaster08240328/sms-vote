"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const EventContestantSchema = new mongoose.Schema({
    Name: String,
    ContestantNumber: Number,
});
const RoundContestantSchema = new mongoose.Schema({
    Name: String,
    ContestantNumber: Number,
    Votes: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Registration', unique: true }]
});
const RoundSchema = new mongoose.Schema({
    RoundNumber: Number,
    Contestants: [RoundContestantSchema],
    IsFinished: Boolean
});
const EventSchema = new mongoose.Schema({
    Name: { type: String, unique: true },
    Contestants: [EventContestantSchema],
    Rounds: [RoundSchema],
    PhoneNumber: String,
    Registrations: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Registration', unique: true }],
    CurrentRound: RoundSchema,
    Enabled: Boolean
});
EventSchema.methods.hasVoted = function (phoneNumber) {
    const thisEvent = this;
    return thisEvent.CurrentRound.Contestants.reduce((prev, cur) => prev.concat(cur.Votes.map(v => v.PhoneNumber)), [])
        .find(n => n === phoneNumber) ? true : false;
};
const EventModel = mongoose.model('Event', EventSchema);
exports.default = EventModel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVscy9FdmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFxQztBQWFyQyxNQUFNLHFCQUFxQixHQUFvQixJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDL0QsSUFBSSxFQUFFLE1BQU07SUFDWixnQkFBZ0IsRUFBRSxNQUFNO0NBQzNCLENBQUMsQ0FBQztBQUVILE1BQU0scUJBQXFCLEdBQW9CLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUMvRCxJQUFJLEVBQUUsTUFBTTtJQUNaLGdCQUFnQixFQUFFLE1BQU07SUFDeEIsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO0NBQ3ZGLENBQUMsQ0FBQztBQUVILE1BQU0sV0FBVyxHQUFvQixJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDckQsV0FBVyxFQUFFLE1BQU07SUFDbkIsV0FBVyxFQUFFLENBQUMscUJBQXFCLENBQUM7SUFDcEMsVUFBVSxFQUFFLE9BQU87Q0FDdEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxXQUFXLEdBQW9CLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUNyRCxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDcEMsV0FBVyxFQUFFLENBQUMscUJBQXFCLENBQUM7SUFDcEMsTUFBTSxFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ3JCLFdBQVcsRUFBRSxNQUFNO0lBQ25CLGFBQWEsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUM1RixZQUFZLEVBQUUsV0FBVztJQUN6QixPQUFPLEVBQUUsT0FBTztDQUNuQixDQUFDLENBQUM7QUFFSCxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxVQUFTLFdBQW1CO0lBQ25ELE1BQU0sU0FBUyxHQUFtQixJQUFLLENBQUM7SUFDeEMsT0FBTyxTQUFTLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFjLEVBQUUsR0FBdUIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUM1SSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3JELENBQUMsQ0FBQztBQUVOLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQWdCLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztBQUN2RSxrQkFBZSxVQUFVLENBQUMiLCJmaWxlIjoibW9kZWxzL0V2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xyXG5cclxuaW1wb3J0IHsgUmVnaXN0cmF0aW9uU2NoZW1hIH0gZnJvbSAnLi9SZWdpc3RyYXRpb24nO1xyXG5pbXBvcnQgRXZlbnREVE8gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL0V2ZW50RFRPJztcclxuaW1wb3J0IFJvdW5kRFRPIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Sb3VuZERUTyc7XHJcbmltcG9ydCBSb3VuZENvbnRlc3RhbnREVE8gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL0NvbnRlc3RhbnREVE8nO1xyXG5pbXBvcnQgUmVnaXN0cmF0aW9uRFRPIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9SZWdpc3RyYXRpb25EVE8nO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnREb2N1bWVudCBleHRlbmRzIEV2ZW50RFRPLCBtb25nb29zZS5Eb2N1bWVudCB7XHJcbiAgICBoYXNWb3RlZChwaG9uZU51bWJlcjogc3RyaW5nKTogYm9vbGVhbjtcclxufVxyXG5cclxuY29uc3QgRXZlbnRDb250ZXN0YW50U2NoZW1hOiBtb25nb29zZS5TY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcclxuICAgIE5hbWU6IFN0cmluZyxcclxuICAgIENvbnRlc3RhbnROdW1iZXI6IE51bWJlcixcclxufSk7XHJcblxyXG5jb25zdCBSb3VuZENvbnRlc3RhbnRTY2hlbWE6IG1vbmdvb3NlLlNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgTmFtZTogU3RyaW5nLFxyXG4gICAgQ29udGVzdGFudE51bWJlcjogTnVtYmVyLFxyXG4gICAgVm90ZXM6IFt7IHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiAnUmVnaXN0cmF0aW9uJywgdW5pcXVlOiB0cnVlIH1dXHJcbn0pO1xyXG5cclxuY29uc3QgUm91bmRTY2hlbWE6IG1vbmdvb3NlLlNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgUm91bmROdW1iZXI6IE51bWJlcixcclxuICAgIENvbnRlc3RhbnRzOiBbUm91bmRDb250ZXN0YW50U2NoZW1hXSxcclxuICAgIElzRmluaXNoZWQ6IEJvb2xlYW5cclxufSk7XHJcblxyXG5jb25zdCBFdmVudFNjaGVtYTogbW9uZ29vc2UuU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgICBOYW1lOiB7IHR5cGU6IFN0cmluZywgdW5pcXVlOiB0cnVlIH0sXHJcbiAgICBDb250ZXN0YW50czogW0V2ZW50Q29udGVzdGFudFNjaGVtYV0sXHJcbiAgICBSb3VuZHM6IFtSb3VuZFNjaGVtYV0sXHJcbiAgICBQaG9uZU51bWJlcjogU3RyaW5nLFxyXG4gICAgUmVnaXN0cmF0aW9uczogW3sgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6ICdSZWdpc3RyYXRpb24nLCB1bmlxdWU6IHRydWUgfV0sXHJcbiAgICBDdXJyZW50Um91bmQ6IFJvdW5kU2NoZW1hLFxyXG4gICAgRW5hYmxlZDogQm9vbGVhblxyXG59KTtcclxuXHJcbkV2ZW50U2NoZW1hLm1ldGhvZHMuaGFzVm90ZWQgPSBmdW5jdGlvbihwaG9uZU51bWJlcjogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgdGhpc0V2ZW50ID0gKDxFdmVudERvY3VtZW50PnRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzRXZlbnQuQ3VycmVudFJvdW5kLkNvbnRlc3RhbnRzLnJlZHVjZSgocHJldjogc3RyaW5nW10sIGN1cjogUm91bmRDb250ZXN0YW50RFRPKSA9PiBwcmV2LmNvbmNhdChjdXIuVm90ZXMubWFwKHYgPT4gdi5QaG9uZU51bWJlcikpLCBbXSlcclxuICAgICAgICAgICAgLmZpbmQobiA9PiBuID09PSBwaG9uZU51bWJlcikgPyB0cnVlIDogZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuY29uc3QgRXZlbnRNb2RlbCA9IG1vbmdvb3NlLm1vZGVsPEV2ZW50RG9jdW1lbnQ+KCdFdmVudCcsIEV2ZW50U2NoZW1hKTtcclxuZXhwb3J0IGRlZmF1bHQgRXZlbnRNb2RlbDsiXX0=
