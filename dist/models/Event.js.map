{"version":3,"sources":["models/Event.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AAErC,iDAAoD;AAWpD,MAAM,gBAAgB,GAAoB,IAAI,QAAQ,CAAC,MAAM,CAAC;IAC1D,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,MAAM;IACf,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,cAAc,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;CACvF,CAAC,CAAC;AAEH,MAAM,WAAW,GAAoB,IAAI,QAAQ,CAAC,MAAM,CAAC;IACrD,WAAW,EAAE,MAAM;IACnB,WAAW,EAAE,CAAC,gBAAgB,CAAC;CAClC,CAAC,CAAC;AAEH,MAAM,WAAW,GAAoB,IAAI,QAAQ,CAAC,MAAM,CAAC;IACrD,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE;IACpC,WAAW,EAAE,CAAC,gBAAgB,CAAC;IAC/B,MAAM,EAAE,CAAC,WAAW,CAAC;IACrB,WAAW,EAAE,MAAM;IACnB,aAAa,EAAE,CAAC,iCAAkB,CAAC;IACnC,YAAY,EAAE,WAAW;CAC5B,CAAC,CAAC;AAEH,WAAW,CAAC,OAAO,CAAC,QAAQ,GAAG,UAAS,WAAmB;IACvD,MAAM,CAAiB,IAAK,CAAC,YAAY,CAAC,WAAW;SAChD,MAAM,CAAC,CAAC,IAAc,EAAE,GAAkB,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC;SAClG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;AACjD,CAAC,CAAC;AAEN,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAgB,OAAO,EAAE,WAAW,CAAC,CAAC;AACvE,kBAAe,UAAU,CAAC","file":"Event.js","sourcesContent":["import * as mongoose from 'mongoose';\n\nimport { RegistrationSchema } from './Registration';\nimport EventDTO from '../../../shared/EventDTO';\nimport RoundDTO from '../../../shared/RoundDTO';\nimport ContestantDTO from '../../../shared/ContestantDTO';\nimport RegistrationDTO from '../../../shared/RegistrationDTO';\n\n\nexport interface EventDocument extends EventDTO, mongoose.Document {\n    hasVoted(phoneNumber: string): boolean;\n}\n\nconst ContestantSchema: mongoose.Schema = new mongoose.Schema({\n    Name: String,\n    VoteKey: Number,\n    Votes: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Registration', unique: true }]\n});\n\nconst RoundSchema: mongoose.Schema = new mongoose.Schema({\n    RoundNumber: Number,\n    Contestants: [ContestantSchema]\n});\n\nconst EventSchema: mongoose.Schema = new mongoose.Schema({\n    Name: { type: String, unique: true },\n    Contestants: [ContestantSchema],\n    Rounds: [RoundSchema],\n    PhoneNumber: String,\n    Registrations: [RegistrationSchema],\n    CurrentRound: RoundSchema\n});\n\nEventSchema.methods.hasVoted = function(phoneNumber: string): boolean {\n    return (<EventDocument>this).CurrentRound.Contestants\n        .reduce((prev: string[], cur: ContestantDTO) => prev.concat(cur.Votes.map(v => v.PhoneNumber)), [])\n        .find(n => n === phoneNumber) ? true : false;\n    };\n\nconst EventModel = mongoose.model<EventDocument>('Event', EventSchema);\nexport default EventModel;"]}