"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bcrypt = require("bcrypt-nodejs");
const crypto = require("crypto");
const mongoose = require("mongoose");
const UserSchema = new mongoose.Schema({
    email: { type: String, unique: true },
    password: String,
    passwordResetToken: String,
    passwordResetExpires: Date,
    isAdmin: Boolean,
    facebook: String,
    twitter: String,
    google: String,
    tokens: Array,
    profile: {
        name: String,
        gender: String,
        location: String,
        website: String,
        picture: String
    }
}, { timestamps: true });
/**
 * Password hash middleware.
 */
UserSchema.pre('save', function save(next) {
    const user = this;
    if (!user.isModified('password')) {
        return next();
    }
    bcrypt.genSalt(10, (err, salt) => {
        if (err) {
            return next(err);
        }
        bcrypt.hash(user.password, salt, undefined, (err, hash) => {
            if (err) {
                return next(err);
            }
            user.password = hash;
            next();
        });
    });
});
UserSchema.methods.comparePassword = function (candidatePassword, cb) {
    bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {
        cb(err, isMatch);
    });
};
/**
 * Helper method for getting user's gravatar.
 */
UserSchema.methods.gravatar = function (size) {
    if (!size) {
        size = 200;
    }
    if (!this.email) {
        return `https://gravatar.com/avatar/?s=${size}&d=retro`;
    }
    const md5 = crypto.createHash('md5').update(this.email).digest('hex');
    return `https://gravatar.com/avatar/${md5}?s=${size}&d=retro`;
};
const UserModel = mongoose.model('User', UserSchema);
// const User = mongoose.model('User', userSchema);
exports.default = UserModel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMiLCJmaWxlIjoibW9kZWxzL1VzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiY3J5cHQgZnJvbSAnYmNyeXB0LW5vZGVqcyc7XG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCAqIGFzIG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcblxuaW1wb3J0IHsgVXNlckRUTyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Vc2VyRFRPJztcblxuZXhwb3J0IGludGVyZmFjZSBVc2VyRG9jdW1lbnQgZXh0ZW5kcyBVc2VyRFRPLCBtb25nb29zZS5Eb2N1bWVudCB7XG4gIGNvbXBhcmVQYXNzd29yZDogKGNhbmRpZGF0ZVBhc3N3b3JkOiBzdHJpbmcsIGNiOiAoZXJyOiBhbnksIGlzTWF0Y2g6IGFueSkgPT4ge30pID0+IHZvaWQ7XG4gIGdyYXZhdGFyOiAoc2l6ZTogbnVtYmVyKSA9PiBzdHJpbmc7XG59XG5cbmNvbnN0IFVzZXJTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcbiAgZW1haWw6IHsgdHlwZTogU3RyaW5nLCB1bmlxdWU6IHRydWUgfSxcbiAgcGFzc3dvcmQ6IFN0cmluZyxcbiAgcGFzc3dvcmRSZXNldFRva2VuOiBTdHJpbmcsXG4gIHBhc3N3b3JkUmVzZXRFeHBpcmVzOiBEYXRlLFxuXG4gIGlzQWRtaW46IEJvb2xlYW4sXG5cbiAgZmFjZWJvb2s6IFN0cmluZyxcbiAgdHdpdHRlcjogU3RyaW5nLFxuICBnb29nbGU6IFN0cmluZyxcbiAgdG9rZW5zOiBBcnJheSxcblxuICBwcm9maWxlOiB7XG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGdlbmRlcjogU3RyaW5nLFxuICAgIGxvY2F0aW9uOiBTdHJpbmcsXG4gICAgd2Vic2l0ZTogU3RyaW5nLFxuICAgIHBpY3R1cmU6IFN0cmluZ1xuICB9XG59LCB7IHRpbWVzdGFtcHM6IHRydWUgfSk7XG5cbi8qKlxuICogUGFzc3dvcmQgaGFzaCBtaWRkbGV3YXJlLlxuICovXG5Vc2VyU2NoZW1hLnByZSgnc2F2ZScsIGZ1bmN0aW9uIHNhdmUobmV4dCkge1xuICBjb25zdCB1c2VyID0gPG1vbmdvb3NlLkRvY3VtZW50ICYgVXNlckRvY3VtZW50PnRoaXM7XG4gIGlmICghdXNlci5pc01vZGlmaWVkKCdwYXNzd29yZCcpKSB7IHJldHVybiBuZXh0KCk7IH1cbiAgYmNyeXB0LmdlblNhbHQoMTAsIChlcnIsIHNhbHQpID0+IHtcbiAgICBpZiAoZXJyKSB7IHJldHVybiBuZXh0KGVycik7IH1cbiAgICBiY3J5cHQuaGFzaCh1c2VyLnBhc3N3b3JkLCBzYWx0LCB1bmRlZmluZWQsIChlcnI6IG1vbmdvb3NlLkVycm9yLCBoYXNoKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7IHJldHVybiBuZXh0KGVycik7IH1cbiAgICAgIHVzZXIucGFzc3dvcmQgPSBoYXNoO1xuICAgICAgbmV4dCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5Vc2VyU2NoZW1hLm1ldGhvZHMuY29tcGFyZVBhc3N3b3JkID0gZnVuY3Rpb24gKGNhbmRpZGF0ZVBhc3N3b3JkOiBzdHJpbmcsIGNiOiAoZXJyOiBhbnksIGlzTWF0Y2g6IGFueSkgPT4ge30pIHtcbiAgYmNyeXB0LmNvbXBhcmUoY2FuZGlkYXRlUGFzc3dvcmQsIHRoaXMucGFzc3dvcmQsIChlcnI6IG1vbmdvb3NlLkVycm9yLCBpc01hdGNoOiBib29sZWFuKSA9PiB7XG4gICAgY2IoZXJyLCBpc01hdGNoKTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogSGVscGVyIG1ldGhvZCBmb3IgZ2V0dGluZyB1c2VyJ3MgZ3JhdmF0YXIuXG4gKi9cblVzZXJTY2hlbWEubWV0aG9kcy5ncmF2YXRhciA9IGZ1bmN0aW9uIChzaXplOiBudW1iZXIpIHtcbiAgaWYgKCFzaXplKSB7XG4gICAgc2l6ZSA9IDIwMDtcbiAgfVxuICBpZiAoIXRoaXMuZW1haWwpIHtcbiAgICByZXR1cm4gYGh0dHBzOi8vZ3JhdmF0YXIuY29tL2F2YXRhci8/cz0ke3NpemV9JmQ9cmV0cm9gO1xuICB9XG4gIGNvbnN0IG1kNSA9IGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUodGhpcy5lbWFpbCkuZGlnZXN0KCdoZXgnKTtcbiAgcmV0dXJuIGBodHRwczovL2dyYXZhdGFyLmNvbS9hdmF0YXIvJHttZDV9P3M9JHtzaXplfSZkPXJldHJvYDtcbn07XG5cbmNvbnN0IFVzZXJNb2RlbCA9IG1vbmdvb3NlLm1vZGVsPFVzZXJEb2N1bWVudD4oJ1VzZXInLCBVc2VyU2NoZW1hKTtcbi8vIGNvbnN0IFVzZXIgPSBtb25nb29zZS5tb2RlbCgnVXNlcicsIHVzZXJTY2hlbWEpO1xuZXhwb3J0IGRlZmF1bHQgVXNlck1vZGVsOyJdfQ==
