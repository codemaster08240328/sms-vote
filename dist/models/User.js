"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bcrypt = require("bcrypt-nodejs");
const crypto = require("crypto");
const mongoose = require("mongoose");
const userSchema = new mongoose.Schema({
    email: { type: String, unique: true },
    password: String,
    passwordResetToken: String,
    passwordResetExpires: Date,
    facebook: String,
    twitter: String,
    google: String,
    tokens: Array,
    profile: {
        name: String,
        gender: String,
        location: String,
        website: String,
        picture: String
    }
}, { timestamps: true });
/**
 * Password hash middleware.
 */
userSchema.pre('save', function save(next) {
    const user = this;
    if (!user.isModified('password')) {
        return next();
    }
    bcrypt.genSalt(10, (err, salt) => {
        if (err) {
            return next(err);
        }
        bcrypt.hash(user.password, salt, undefined, (err, hash) => {
            if (err) {
                return next(err);
            }
            user.password = hash;
            next();
        });
    });
});
userSchema.methods.comparePassword = function (candidatePassword, cb) {
    bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {
        cb(err, isMatch);
    });
};
/**
 * Helper method for getting user's gravatar.
 */
userSchema.methods.gravatar = function (size) {
    if (!size) {
        size = 200;
    }
    if (!this.email) {
        return `https://gravatar.com/avatar/?s=${size}&d=retro`;
    }
    const md5 = crypto.createHash('md5').update(this.email).digest('hex');
    return `https://gravatar.com/avatar/${md5}?s=${size}&d=retro`;
};
// export const User: UserType = mongoose.model<UserType>('User', userSchema);
const User = mongoose.model('User', userSchema);
exports.default = User;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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cy9Vc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYmNyeXB0IGZyb20gJ2JjcnlwdC1ub2RlanMnO1xyXG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcclxuaW1wb3J0ICogYXMgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xyXG5cclxuZXhwb3J0IHR5cGUgVXNlck1vZGVsID0gbW9uZ29vc2UuRG9jdW1lbnQgJiB7XHJcbiAgZW1haWw6IHN0cmluZyxcclxuICBwYXNzd29yZDogc3RyaW5nLFxyXG4gIHBhc3N3b3JkUmVzZXRUb2tlbjogc3RyaW5nLFxyXG4gIHBhc3N3b3JkUmVzZXRFeHBpcmVzOiBEYXRlLFxyXG5cclxuICBmYWNlYm9vazogc3RyaW5nLFxyXG4gIHRva2VuczogQXV0aFRva2VuW10sXHJcblxyXG4gIHByb2ZpbGU6IHtcclxuICAgIG5hbWU6IHN0cmluZyxcclxuICAgIGdlbmRlcjogc3RyaW5nLFxyXG4gICAgbG9jYXRpb246IHN0cmluZyxcclxuICAgIHdlYnNpdGU6IHN0cmluZyxcclxuICAgIHBpY3R1cmU6IHN0cmluZ1xyXG4gIH0sXHJcblxyXG4gIGNvbXBhcmVQYXNzd29yZDogKGNhbmRpZGF0ZVBhc3N3b3JkOiBzdHJpbmcsIGNiOiAoZXJyOiBhbnksIGlzTWF0Y2g6IGFueSkgPT4ge30pID0+IHZvaWQsXHJcbiAgZ3JhdmF0YXI6IChzaXplOiBudW1iZXIpID0+IHN0cmluZ1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQXV0aFRva2VuID0ge1xyXG4gIGFjY2Vzc1Rva2VuOiBzdHJpbmcsXHJcbiAga2luZDogc3RyaW5nXHJcbn07XHJcblxyXG5jb25zdCB1c2VyU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgZW1haWw6IHsgdHlwZTogU3RyaW5nLCB1bmlxdWU6IHRydWUgfSxcclxuICBwYXNzd29yZDogU3RyaW5nLFxyXG4gIHBhc3N3b3JkUmVzZXRUb2tlbjogU3RyaW5nLFxyXG4gIHBhc3N3b3JkUmVzZXRFeHBpcmVzOiBEYXRlLFxyXG5cclxuICBmYWNlYm9vazogU3RyaW5nLFxyXG4gIHR3aXR0ZXI6IFN0cmluZyxcclxuICBnb29nbGU6IFN0cmluZyxcclxuICB0b2tlbnM6IEFycmF5LFxyXG5cclxuICBwcm9maWxlOiB7XHJcbiAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICBnZW5kZXI6IFN0cmluZyxcclxuICAgIGxvY2F0aW9uOiBTdHJpbmcsXHJcbiAgICB3ZWJzaXRlOiBTdHJpbmcsXHJcbiAgICBwaWN0dXJlOiBTdHJpbmdcclxuICB9XHJcbn0sIHsgdGltZXN0YW1wczogdHJ1ZSB9KTtcclxuXHJcbi8qKlxyXG4gKiBQYXNzd29yZCBoYXNoIG1pZGRsZXdhcmUuXHJcbiAqL1xyXG51c2VyU2NoZW1hLnByZSgnc2F2ZScsIGZ1bmN0aW9uIHNhdmUobmV4dCkge1xyXG4gIGNvbnN0IHVzZXIgPSA8bW9uZ29vc2UuRG9jdW1lbnQgJiBVc2VyTW9kZWw+dGhpcztcclxuICBpZiAoIXVzZXIuaXNNb2RpZmllZCgncGFzc3dvcmQnKSkgeyByZXR1cm4gbmV4dCgpOyB9XHJcbiAgYmNyeXB0LmdlblNhbHQoMTAsIChlcnIsIHNhbHQpID0+IHtcclxuICAgIGlmIChlcnIpIHsgcmV0dXJuIG5leHQoZXJyKTsgfVxyXG4gICAgYmNyeXB0Lmhhc2godXNlci5wYXNzd29yZCwgc2FsdCwgdW5kZWZpbmVkLCAoZXJyOiBtb25nb29zZS5FcnJvciwgaGFzaCkgPT4ge1xyXG4gICAgICBpZiAoZXJyKSB7IHJldHVybiBuZXh0KGVycik7IH1cclxuICAgICAgdXNlci5wYXNzd29yZCA9IGhhc2g7XHJcbiAgICAgIG5leHQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbnVzZXJTY2hlbWEubWV0aG9kcy5jb21wYXJlUGFzc3dvcmQgPSBmdW5jdGlvbiAoY2FuZGlkYXRlUGFzc3dvcmQ6IHN0cmluZywgY2I6IChlcnI6IGFueSwgaXNNYXRjaDogYW55KSA9PiB7fSkge1xyXG4gIGJjcnlwdC5jb21wYXJlKGNhbmRpZGF0ZVBhc3N3b3JkLCB0aGlzLnBhc3N3b3JkLCAoZXJyOiBtb25nb29zZS5FcnJvciwgaXNNYXRjaDogYm9vbGVhbikgPT4ge1xyXG4gICAgY2IoZXJyLCBpc01hdGNoKTtcclxuICB9KTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogSGVscGVyIG1ldGhvZCBmb3IgZ2V0dGluZyB1c2VyJ3MgZ3JhdmF0YXIuXHJcbiAqL1xyXG51c2VyU2NoZW1hLm1ldGhvZHMuZ3JhdmF0YXIgPSBmdW5jdGlvbiAoc2l6ZTogbnVtYmVyKSB7XHJcbiAgaWYgKCFzaXplKSB7XHJcbiAgICBzaXplID0gMjAwO1xyXG4gIH1cclxuICBpZiAoIXRoaXMuZW1haWwpIHtcclxuICAgIHJldHVybiBgaHR0cHM6Ly9ncmF2YXRhci5jb20vYXZhdGFyLz9zPSR7c2l6ZX0mZD1yZXRyb2A7XHJcbiAgfVxyXG4gIGNvbnN0IG1kNSA9IGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUodGhpcy5lbWFpbCkuZGlnZXN0KCdoZXgnKTtcclxuICByZXR1cm4gYGh0dHBzOi8vZ3JhdmF0YXIuY29tL2F2YXRhci8ke21kNX0/cz0ke3NpemV9JmQ9cmV0cm9gO1xyXG59O1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IFVzZXI6IFVzZXJUeXBlID0gbW9uZ29vc2UubW9kZWw8VXNlclR5cGU+KCdVc2VyJywgdXNlclNjaGVtYSk7XHJcbmNvbnN0IFVzZXIgPSBtb25nb29zZS5tb2RlbCgnVXNlcicsIHVzZXJTY2hlbWEpO1xyXG5leHBvcnQgZGVmYXVsdCBVc2VyOyJdfQ==
