"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bcrypt = require("bcrypt-nodejs");
const crypto = require("crypto");
const mongoose = require("mongoose");
const UserSchema = new mongoose.Schema({
    email: { type: String, unique: true },
    password: String,
    passwordResetToken: String,
    passwordResetExpires: Date,
    isAdmin: Boolean,
    facebook: String,
    twitter: String,
    google: String,
    tokens: Array,
    profile: {
        name: String,
        gender: String,
        location: String,
        website: String,
        picture: String
    }
}, { timestamps: true });
/**
 * Password hash middleware.
 */
UserSchema.pre('save', function save(next) {
    const user = this;
    if (!user.isModified('password')) {
        return next();
    }
    bcrypt.genSalt(10, (err, salt) => {
        if (err) {
            return next(err);
        }
        bcrypt.hash(user.password, salt, undefined, (err, hash) => {
            if (err) {
                return next(err);
            }
            user.password = hash;
            next();
        });
    });
});
UserSchema.methods.comparePassword = function (candidatePassword, cb) {
    bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {
        cb(err, isMatch);
    });
};
/**
 * Helper method for getting user's gravatar.
 */
UserSchema.methods.gravatar = function (size) {
    if (!size) {
        size = 200;
    }
    if (!this.email) {
        return `https://gravatar.com/avatar/?s=${size}&d=retro`;
    }
    const md5 = crypto.createHash('md5').update(this.email).digest('hex');
    return `https://gravatar.com/avatar/${md5}?s=${size}&d=retro`;
};
const UserModel = mongoose.model('User', UserSchema);
// const User = mongoose.model('User', userSchema);
exports.default = UserModel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMiLCJmaWxlIjoibW9kZWxzL1VzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiY3J5cHQgZnJvbSAnYmNyeXB0LW5vZGVqcyc7XHJcbmltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdjcnlwdG8nO1xyXG5pbXBvcnQgKiBhcyBtb25nb29zZSBmcm9tICdtb25nb29zZSc7XHJcblxyXG5pbXBvcnQgeyBVc2VyRFRPIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL1VzZXJEVE8nO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VyRG9jdW1lbnQgZXh0ZW5kcyBVc2VyRFRPLCBtb25nb29zZS5Eb2N1bWVudCB7XHJcbiAgY29tcGFyZVBhc3N3b3JkOiAoY2FuZGlkYXRlUGFzc3dvcmQ6IHN0cmluZywgY2I6IChlcnI6IGFueSwgaXNNYXRjaDogYW55KSA9PiB7fSkgPT4gdm9pZDtcclxuICBncmF2YXRhcjogKHNpemU6IG51bWJlcikgPT4gc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBVc2VyU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgZW1haWw6IHsgdHlwZTogU3RyaW5nLCB1bmlxdWU6IHRydWUgfSxcclxuICBwYXNzd29yZDogU3RyaW5nLFxyXG4gIHBhc3N3b3JkUmVzZXRUb2tlbjogU3RyaW5nLFxyXG4gIHBhc3N3b3JkUmVzZXRFeHBpcmVzOiBEYXRlLFxyXG5cclxuICBpc0FkbWluOiBCb29sZWFuLFxyXG5cclxuICBmYWNlYm9vazogU3RyaW5nLFxyXG4gIHR3aXR0ZXI6IFN0cmluZyxcclxuICBnb29nbGU6IFN0cmluZyxcclxuICB0b2tlbnM6IEFycmF5LFxyXG5cclxuICBwcm9maWxlOiB7XHJcbiAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICBnZW5kZXI6IFN0cmluZyxcclxuICAgIGxvY2F0aW9uOiBTdHJpbmcsXHJcbiAgICB3ZWJzaXRlOiBTdHJpbmcsXHJcbiAgICBwaWN0dXJlOiBTdHJpbmdcclxuICB9XHJcbn0sIHsgdGltZXN0YW1wczogdHJ1ZSB9KTtcclxuXHJcbi8qKlxyXG4gKiBQYXNzd29yZCBoYXNoIG1pZGRsZXdhcmUuXHJcbiAqL1xyXG5Vc2VyU2NoZW1hLnByZSgnc2F2ZScsIGZ1bmN0aW9uIHNhdmUobmV4dCkge1xyXG4gIGNvbnN0IHVzZXIgPSA8bW9uZ29vc2UuRG9jdW1lbnQgJiBVc2VyRG9jdW1lbnQ+dGhpcztcclxuICBpZiAoIXVzZXIuaXNNb2RpZmllZCgncGFzc3dvcmQnKSkgeyByZXR1cm4gbmV4dCgpOyB9XHJcbiAgYmNyeXB0LmdlblNhbHQoMTAsIChlcnIsIHNhbHQpID0+IHtcclxuICAgIGlmIChlcnIpIHsgcmV0dXJuIG5leHQoZXJyKTsgfVxyXG4gICAgYmNyeXB0Lmhhc2godXNlci5wYXNzd29yZCwgc2FsdCwgdW5kZWZpbmVkLCAoZXJyOiBtb25nb29zZS5FcnJvciwgaGFzaCkgPT4ge1xyXG4gICAgICBpZiAoZXJyKSB7IHJldHVybiBuZXh0KGVycik7IH1cclxuICAgICAgdXNlci5wYXNzd29yZCA9IGhhc2g7XHJcbiAgICAgIG5leHQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblVzZXJTY2hlbWEubWV0aG9kcy5jb21wYXJlUGFzc3dvcmQgPSBmdW5jdGlvbiAoY2FuZGlkYXRlUGFzc3dvcmQ6IHN0cmluZywgY2I6IChlcnI6IGFueSwgaXNNYXRjaDogYW55KSA9PiB7fSkge1xyXG4gIGJjcnlwdC5jb21wYXJlKGNhbmRpZGF0ZVBhc3N3b3JkLCB0aGlzLnBhc3N3b3JkLCAoZXJyOiBtb25nb29zZS5FcnJvciwgaXNNYXRjaDogYm9vbGVhbikgPT4ge1xyXG4gICAgY2IoZXJyLCBpc01hdGNoKTtcclxuICB9KTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogSGVscGVyIG1ldGhvZCBmb3IgZ2V0dGluZyB1c2VyJ3MgZ3JhdmF0YXIuXHJcbiAqL1xyXG5Vc2VyU2NoZW1hLm1ldGhvZHMuZ3JhdmF0YXIgPSBmdW5jdGlvbiAoc2l6ZTogbnVtYmVyKSB7XHJcbiAgaWYgKCFzaXplKSB7XHJcbiAgICBzaXplID0gMjAwO1xyXG4gIH1cclxuICBpZiAoIXRoaXMuZW1haWwpIHtcclxuICAgIHJldHVybiBgaHR0cHM6Ly9ncmF2YXRhci5jb20vYXZhdGFyLz9zPSR7c2l6ZX0mZD1yZXRyb2A7XHJcbiAgfVxyXG4gIGNvbnN0IG1kNSA9IGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUodGhpcy5lbWFpbCkuZGlnZXN0KCdoZXgnKTtcclxuICByZXR1cm4gYGh0dHBzOi8vZ3JhdmF0YXIuY29tL2F2YXRhci8ke21kNX0/cz0ke3NpemV9JmQ9cmV0cm9gO1xyXG59O1xyXG5cclxuY29uc3QgVXNlck1vZGVsID0gbW9uZ29vc2UubW9kZWw8VXNlckRvY3VtZW50PignVXNlcicsIFVzZXJTY2hlbWEpO1xyXG4vLyBjb25zdCBVc2VyID0gbW9uZ29vc2UubW9kZWwoJ1VzZXInLCB1c2VyU2NoZW1hKTtcclxuZXhwb3J0IGRlZmF1bHQgVXNlck1vZGVsOyJdfQ==
