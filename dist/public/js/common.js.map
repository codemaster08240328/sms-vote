{"version":3,"sources":["ArrayExtensions.ts","StringExtensions.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["interface Array<T> {\n    contains(item: T): boolean;\n    addRange(items: T[]): void;\n    clear(): void;\n    clone(): Array<T>;\n    find(compareFn: (value: T) => boolean): T;\n}\n\nif (!Array.prototype.contains) {\n    Array.prototype.contains = function (item: any): boolean\n    {\n        return this.indexOf(item) >= 0;\n    };\n}\n\nif (!Array.prototype.clear) {\n    Array.prototype.clear = function ()\n    {\n        this.length = 0;\n    };\n}\n\nif (!Array.prototype.addRange) {\n    Array.prototype.addRange = function (items)\n    {\n        this.push.apply(this, items);\n    };\n}\n\nif (!Array.prototype.clone) {\n    Array.prototype.clone = function ()\n    {\n        if (this.length === 1) {\n            return [this[0]];\n        }\n        else {\n            return Array.apply(null, this);\n        }\n    };\n}\n\nif (!Array.prototype.find) {\n    Array.prototype.find = function (predicate: any) {\n        'use strict';\n        if (this == null) {\n            throw new TypeError('Array.prototype.find called on null or undefined');\n        }\n        if (typeof predicate !== 'function') {\n            throw new TypeError('predicate must be a function');\n        }\n        const list = Object(this);\n        const length = list.length >>> 0;\n        const thisArg = arguments[1];\n        let value: any = null;\n\n        for (let i = 0; i < length; i++) {\n            value = list[i];\n            if (predicate.call(thisArg, value, i, list)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n}","interface String {\n    startsWith(str: string): boolean;\n    compareTo(s: string, ignoreCase: boolean): number;\n    contains(str: string): boolean;\n}\n\ninterface StringConstructor {\n    isNullOrEmpty(s: string): boolean;\n    concat(...strings: string[]): string;\n    format(format: string, ...values: any[]): string;\n    compareTo(str1: string, str2: string, ignoreCase: boolean): number;\n    contains(str: string): boolean;\n}\n\nif (!String.prototype.contains) {\n    String.prototype.contains = function (str: string) {\n        return this.indexOf(str) > -1;\n    };\n}\n\nif (!String.prototype.compareTo) {\n    String.prototype.compareTo = function (s: string, ignoreCase: boolean)\n    {\n        return String.compareTo(this, s, ignoreCase);\n    };\n}\n\nif (!String.compareTo) {\n    String.compareTo = function (s1: string, s2: string, ignoreCase: boolean)\n    {\n        if (ignoreCase) {\n            if (s1) {\n                s1 = s1.toUpperCase();\n            }\n            if (s2) {\n                s2 = s2.toUpperCase();\n            }\n        }\n        s1 = s1 || '';\n        s2 = s2 || '';\n\n        if (s1 == s2) {\n            return 0;\n        }\n        if (s1 < s2) {\n            return -1;\n        }\n        return 1;\n    };\n}\n\nif (!String.prototype.startsWith) {\n    String.prototype.startsWith = function (str: string): boolean {\n        return this.indexOf(str) == 0;\n    };\n}\n\nif (!String.isNullOrEmpty) {\n    String.isNullOrEmpty = function (s: string): boolean {\n        return !s || !s.length;\n    };\n}\n\nif (!String.concat) {\n    String.concat = function (): string\n    {\n        if (arguments.length === 2) {\n            return arguments[0] + arguments[1];\n        }\n        return Array.prototype.join.call(arguments, '');\n    };\n}\n\nfunction __format(format: string, values: IArguments, useLocale: boolean): string {\n    const  _formatRE: RegExp = /(\\{[^\\}^\\{]+\\})/g;\n\n    return format.replace(_formatRE,\n        function (str, m) {\n            const  index = parseInt(m.substr(1));\n            const  value = values[index + 1];\n            if ((value === null) || (value === undefined)) {\n                return '';\n            }\n            if (value.format) {\n                let  formatSpec: string = null;\n                const  formatIndex = m.indexOf(':');\n                if (formatIndex > 0) {\n                    formatSpec = m.substring(formatIndex + 1, m.length - 1);\n                }\n                return value.format(formatSpec);\n            }\n            else {\n                return value.toString();\n            }\n        });\n}"]}