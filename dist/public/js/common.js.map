{"version":3,"sources":["ArrayExtensions.ts","KnockoutBindings.ts","StringExtensions.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["interface Array<T> {\r\n    contains(item: T): boolean;\r\n    addRange(items: T[]): void;\r\n    clear(): void;\r\n    clone(): Array<T>;\r\n    find(compareFn: (value: T) => boolean): T;\r\n}\r\n\r\nif (!Array.prototype.contains) {\r\n    Array.prototype.contains = function (item: any): boolean\r\n    {\r\n        return this.indexOf(item) >= 0;\r\n    };\r\n}\r\n\r\nif (!Array.prototype.clear) {\r\n    Array.prototype.clear = function ()\r\n    {\r\n        this.length = 0;\r\n    };\r\n}\r\n\r\nif (!Array.prototype.addRange) {\r\n    Array.prototype.addRange = function (items)\r\n    {\r\n        this.push.apply(this, items);\r\n    };\r\n}\r\n\r\nif (!Array.prototype.clone) {\r\n    Array.prototype.clone = function ()\r\n    {\r\n        if (this.length === 1) {\r\n            return [this[0]];\r\n        }\r\n        else {\r\n            return Array.apply(null, this);\r\n        }\r\n    };\r\n}\r\n\r\nif (!Array.prototype.find) {\r\n    Array.prototype.find = function (predicate: any) {\r\n        'use strict';\r\n        if (this == null) {\r\n            throw new TypeError('Array.prototype.find called on null or undefined');\r\n        }\r\n        if (typeof predicate !== 'function') {\r\n            throw new TypeError('predicate must be a function');\r\n        }\r\n        const list = Object(this);\r\n        const length = list.length >>> 0;\r\n        const thisArg = arguments[1];\r\n        let value: any = null;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            value = list[i];\r\n            if (predicate.call(thisArg, value, i, list)) {\r\n                return value;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n}","/// <reference types=\"knockout\" />\r\n/// <reference types=\"ladda\" />\r\n\r\nko.bindingHandlers.buttonbusy = {\r\n    update: function(element: HTMLElement, valueAccessor: () => KnockoutObservable<boolean>, allBindings, viewModel, bindingContext) {\r\n        const l = Ladda.create(element);\r\n        const value = ko.unwrap(valueAccessor());\r\n        value ? l.start() : l.stop();\r\n    }\r\n};","interface String {\r\n    startsWith(str: string): boolean;\r\n    compareTo(s: string, ignoreCase: boolean): number;\r\n    contains(str: string): boolean;\r\n}\r\n\r\ninterface StringConstructor {\r\n    isNullOrEmpty(s: string): boolean;\r\n    concat(...strings: string[]): string;\r\n    format(format: string, ...values: any[]): string;\r\n    compareTo(str1: string, str2: string, ignoreCase: boolean): number;\r\n    contains(str: string): boolean;\r\n}\r\n\r\nif (!String.prototype.contains) {\r\n    String.prototype.contains = function (str: string) {\r\n        return this.indexOf(str) > -1;\r\n    };\r\n}\r\n\r\nif (!String.prototype.compareTo) {\r\n    String.prototype.compareTo = function (s: string, ignoreCase: boolean)\r\n    {\r\n        return String.compareTo(this, s, ignoreCase);\r\n    };\r\n}\r\n\r\nif (!String.compareTo) {\r\n    String.compareTo = function (s1: string, s2: string, ignoreCase: boolean)\r\n    {\r\n        if (ignoreCase) {\r\n            if (s1) {\r\n                s1 = s1.toUpperCase();\r\n            }\r\n            if (s2) {\r\n                s2 = s2.toUpperCase();\r\n            }\r\n        }\r\n        s1 = s1 || '';\r\n        s2 = s2 || '';\r\n\r\n        if (s1 == s2) {\r\n            return 0;\r\n        }\r\n        if (s1 < s2) {\r\n            return -1;\r\n        }\r\n        return 1;\r\n    };\r\n}\r\n\r\nif (!String.prototype.startsWith) {\r\n    String.prototype.startsWith = function (str: string): boolean {\r\n        return this.indexOf(str) == 0;\r\n    };\r\n}\r\n\r\nif (!String.isNullOrEmpty) {\r\n    String.isNullOrEmpty = function (s: string): boolean {\r\n        return !s || !s.length;\r\n    };\r\n}\r\n\r\nif (!String.concat) {\r\n    String.concat = function (): string\r\n    {\r\n        if (arguments.length === 2) {\r\n            return arguments[0] + arguments[1];\r\n        }\r\n        return Array.prototype.join.call(arguments, '');\r\n    };\r\n}\r\n\r\nfunction __format(format: string, values: IArguments, useLocale: boolean): string {\r\n    const  _formatRE: RegExp = /(\\{[^\\}^\\{]+\\})/g;\r\n\r\n    return format.replace(_formatRE,\r\n        function (str, m) {\r\n            const  index = parseInt(m.substr(1));\r\n            const  value = values[index + 1];\r\n            if ((value === null) || (value === undefined)) {\r\n                return '';\r\n            }\r\n            if (value.format) {\r\n                let  formatSpec: string = null;\r\n                const  formatIndex = m.indexOf(':');\r\n                if (formatIndex > 0) {\r\n                    formatSpec = m.substring(formatIndex + 1, m.length - 1);\r\n                }\r\n                return value.format(formatSpec);\r\n            }\r\n            else {\r\n                return value.toString();\r\n            }\r\n        });\r\n}"]}